{"data":{"markdownRemark":{"html":"<div class=\"content\">\n<p>Now that we have a basic understanding of how TypeScript works and of how to create actual projects with it, it is time to start creating something actually useful. So now we're going to create a completely new project, with a bit more realistic use cases in mind.</p>\n<p>One major change from the previous part is that <strong>we're not going to use ts-node anymore</strong>. ts-node is a handy tool, with which it is very easy to get started, but in the long run it is suggested to use the official TypeScript compiler that comes with the <em>typescript</em> npm-package. With this compiler the basic JavaScript files are generated and packaged from the .ts files so that the built <i>production version</i> of the project won't contain any TypeScript code. This is exactly what is aimed for in the end, since TypeScript in itself is not runnable by browsers or Node.</p>\n<h3>Setting up the project</h3>\n<p>Our project is created for Ilari, who loves riding small planes but has a bit of difficulties managing his flight history. He is quite the coder himself, so he doesn't necessarily need a user interface for his flight records, but he'd like to use the software with HTTP-requests so that the possibility to extend the application to also include a web-based user interface is maintained.</p>\n<p>Let's start creating our own first real project 'Ilari's flight diaries', as we usually would by running <em>npm init</em> and by installing the <em>typescript</em> package. </p>\n<p>TypeScript's native <em>tsc</em> compiler offers us help initialising our project with the command <em>tsc --init</em>. To be able to run this, we need to add the <em>tsc</em> command to runnable scripts in the package.json file if we don't have <em>typescript</em> installed globally. And even if you would have typescript installed globally, you should always include the package as a dev-dependency in your project.</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  // ..\n  <span class=\"token property\">\"scripts\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token property\">\"tsc\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"tsc\"</span><span class=\"token punctuation\">,</span></span>  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  // ..\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p> Very often the bare <em>tsc</em> command is set up in the project scripts for other scripts to use, so it is very common to see the  <em>tsc</em> command set up within the project like this.</p>\n<p> Now we can init our tsconfig.json settings by running:</p>\n<div class=\"gatsby-highlight\" data-language=\"sh\"><pre class=\"language-sh\"><code class=\"language-sh\"> npm run tsc -- --init</code></pre></div>\n<p> <strong>Notice</strong> the extra -- before the actual argument, arguments before the -- are interpreted for the command <em>npm</em> abd after are for the command that is run throught the package.json scripts. </p>\n<p>The created tsconfig.json contains a pretty big list of all of the possible configurations available to use with only a few uncommented ones. Studying the initial tsconfig.json file might be useful to find something you might be needing and it is completely okay to not delete the commented rows in the file just in case you might someday need to expand your configuration settings. </p>\n<p>Right now the preferred settings we want right now are the following:</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"compilerOptions\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"target\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"ES6\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"outDir\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"./build/\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"module\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"commonjs\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"strict\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"noUnusedLocals\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"noUnusedParameters\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>       \n    <span class=\"token property\">\"noImplicitReturns\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"noImplicitAny\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"noFallthroughCasesInSwitch\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"esModuleInterop\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span>\n     \n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Let's go through each setting now: </p>\n<p>The <i>target</i> parameter informs the compiler into which ECMAScript version the generated JavaScript should be generated into. ES6 is supported by most browsers and therefore is a good and pretty safe option.</p>\n<p><i>outDir</i> tells where the compiled result should be placed.</p>\n<p><i>module</i> tells the compiler that we want to use <i>commonjs</i> modules in compiled code, so the code uses <em>require</em> instead of <em>import</em> that is not supported in older Node.js versions such as the version 10. </p>\n<p><i>strict</i> is actually a shorthand to include multiple separate options:\n<i>noImplicitAny, noImplicitThis, alwaysStrict, strictBindCallApply, strictNullChecks, strictFunctionTypes and strictPropertyInitialization</i>. These all guide our coding style use TypeScript features more strictly, <i>noImplicitAny</i> restricts implicit setting for any, which happens for example if you don't type the expected variables of a function. The rest of the options can all be studied more closely on the <a href=\"https://www.typescriptlang.org/v2/en/tsconfig#strict\">tsconfig documentation</a>. Using <i>strict</i> is suggested by the official documentation.</p>\n<p><i>noUnusedLocals</i> gives an error if a local variable is unused and </i>noUnusedParameters</i> when on unused parameters. </p>\n<p><i>noFallthroughCasesInSwitch</i> gives an error if a <em>switch - case</em> is used without a fallthrough possibility (falling to a case does not <em>return</em> or <em>break</em> the evaluation of the switch).</p>\n<p><i>esModuleInterop</i> allows interaperability between commonJS and ES Modules, see more <a href=\"https://www.typescriptlang.org/v2/en/tsconfig#esModuleInterop\">in documentation</a>.</p>\n<p>Now that we have our preferred configuration set, let's continue by installing <em>express</em> and of course also <em>@types/express</em>. Since this is a real project, which is intended to be grown over time, it might be useful to use eslint from the beginning, so that no extra refactoring or rewriting is needed later on if these are added afterwards. We should also put So let's also install <em>eslint</em>, <em>@typescript-eslint/eslint-plugin</em> and <em>@typescript-eslint/parser</em>.</p>\n<div class=\"gatsby-highlight\" data-language=\"sh\"><pre class=\"language-sh\"><code class=\"language-sh\">npm install express\nnpm install --save-dev @types/express @typescript-eslint/eslint-plugin @typescript-eslint/parser</code></pre></div>\n<p>Now our <em>package.json</em> should look something like this: </p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"ilaris-flight-diaries\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"version\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"1.0.0\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"description\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"main\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"index.ts\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"scripts\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"tsc\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"tsc\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"test\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"echo \\\"Error: no test specified\\\" &amp;&amp; exit 1\"</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"author\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"license\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"ISC\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"dependencies\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"express\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"^4.17.1\"</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"devDependencies\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"@types/express\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"^4.17.2\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"@typescript-eslint/eslint-plugin\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"^2.17.0\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"@typescript-eslint/parser\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"^2.17.0\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"eslint\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"^6.8.0\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"typescript\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"^3.7.5\"</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>We should also create <em>.eslintrc</em> with the following content:</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"extends\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token string\">\"eslint:recommended\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"plugin:@typescript-eslint/recommended\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"plugin:@typescript-eslint/recommended-requiring-type-checking\"</span>\n  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"plugins\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"@typescript-eslint\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"env\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"browser\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"es6\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"rules\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"@typescript-eslint/semi\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"error\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"@typescript-eslint/explicit-function-return-type\"</span><span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"@typescript-eslint/no-unused-vars\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n        <span class=\"token string\">\"error\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> <span class=\"token property\">\"argsIgnorePattern\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"^_\"</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n     <span class=\"token property\">\"@typescript-eslint/no-explicit-any\"</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"no-case-declarations\"</span><span class=\"token operator\">:</span> <span class=\"token number\">0</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"parser\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"@typescript-eslint/parser\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"parserOptions\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"project\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"./tsconfig.json\"</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Now we only need to set up our development environment properly, and then we are ready to start writing some serious code. There are many different options and we could use the familiar <em>nodemon</em> with <em>ts-node</em>, but as we saw before, <em>ts-node-dev</em> does the exact same thing and we can continue using it. So, let's install <em>ts-node-dev</em> and we are ready to start developing. </p>\n<div class=\"gatsby-highlight\" data-language=\"sh\"><pre class=\"language-sh\"><code class=\"language-sh\">npm install --save-dev ts-node-dev</code></pre></div>\n<p><strong>Sidenote:</strong> When deciding on what packages to use, a <a href=\"https://npmtrends.com\">npmtrends</a> is a good place to compare the popularity and growth of different npm packages. When <a href=\"https://www.npmtrends.com/nodemon-vs-ts-node-dev-vs-ts-node\">comparing</a> the use of <em>ts-node-dev</em> and both <em>nodemon</em> and <em>ts-node</em>  we can see that the popularity of ts-node-dev is not nearly as popular as using nodemon and ts-dev, so the safer choice might be to just go with the other choice. Now let's still give <em>ts-node-dev</em> a chance and use it in these exercises.</p>\n<p>There sure is a lot of stuff to go through before you can even start the actual coding. When in a real project, careful preparations support your development process to a great length, so take the time to create a good setting for yourself / your team and in the long run everything will be much smoother. </p>\n<h3>Let there be code</h3>\n<p>Now we can finally start coding! As before, let's start out by creating our first ping-endpoint, just to make sure everything is working.</p>\n<p>The contents of the root <em>index.ts</em> file:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> express <span class=\"token keyword\">from</span> <span class=\"token string\">'express'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> app <span class=\"token operator\">=</span> <span class=\"token function\">express</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\napp<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span>express<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token constant\">PORT</span> <span class=\"token operator\">=</span> <span class=\"token number\">3000</span><span class=\"token punctuation\">;</span>\n\napp<span class=\"token punctuation\">.</span><span class=\"token keyword\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/ping'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'someone pinged here'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    res<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token string\">'pong'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  \napp<span class=\"token punctuation\">.</span><span class=\"token function\">listen</span><span class=\"token punctuation\">(</span><span class=\"token constant\">PORT</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token string\">`Server running on port </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token constant\">PORT</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>And since we haven't yet set up the development script that uses the ts-node-dev, now is the correct time to add it:</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  // ..\n  <span class=\"token property\">\"scripts\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"tsc\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"tsc\"</span><span class=\"token punctuation\">,</span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token property\">\"dev\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"ts-node-dev index.ts\"</span></span>  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  // ..\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Now we could run the <em>npm run dev</em>, but wait, a problem arises! </p>\n<div class=\"gatsby-highlight\" data-language=\"sh\"><pre class=\"language-sh\"><code class=\"language-sh\">index.ts:7:19 - error TS6133: &#39;req&#39; is declared but its value is never read.\n\n7 app.get(&#39;/ping&#39;, (req, res) =&gt; {\n                    ~~~\nFound 1 error.</code></pre></div>\n<p>So our stricter than before tsconfig options don't allow us to keep unused variables within the code while making a production build. This comes problematic when we have library-wide predefined functions, that like in this case require declaring a variable, even though in the code it is not necessarily required to use at all. Fortunately this issue has already been solved on configuration level and once again hovering on the issue gives us a solution for the problem, this time by clicking the quick fix button: </p>\n<picture><img src=\"/static/aab375f39eba1edc51cd60f022e04aa8/14be6/14.png\" srcset=\"/static/aab375f39eba1edc51cd60f022e04aa8/4cce7/14.png 200w,\n/static/aab375f39eba1edc51cd60f022e04aa8/bae5f/14.png 400w,\n/static/aab375f39eba1edc51cd60f022e04aa8/14be6/14.png 800w,\n/static/aab375f39eba1edc51cd60f022e04aa8/31231/14.png 822w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>If it is absolutely impossible to get rid of an unused variable, you should prefix it with an underscore to inform the compiler that this has been taken into considearation and there is nothing we can do. Let's rename the <em>req</em> variable to _<em>req</em> and we can continue with our development.</p>\n<p>Now by running <em>npm run dev</em> we should be able to run and curl our <em>/ping</em> endpoint.</p>\n<p>Now when we can see the happy <em>pong</em>, we should try creating our first production build. Now that we have defined the <em>outdir</em> in our tsconfig.json, there's nothing else really to do, but running <em>npm run tsc</em>.</p>\n<p>Just like magic a native runnable JavaScript production build of the ping-pong express backend is created into the build folder.</p>\n<p>Now our eslint also tries to interpret the files in the <em>build</em> folder, which we don't want, as this is compiler generated code. This can easily be prevented by creating a file <em>.eslintignore</em> in your project's root with the content you want eslint to ignore, exactly as in <em>.gitignore</em>.</p>\n<p>Let's try our project by creating production run command for the project:</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  // ...\n  <span class=\"token property\">\"scripts\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"tsc\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"tsc\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"dev\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"ts-node-dev index.ts\"</span><span class=\"token punctuation\">,</span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token property\">\"start\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"node build/index.js\"</span></span>  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  // ...\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>and run <em>npm start</em> and then try to curl our defined port:</p>\n<picture><img src=\"/static/bfbdc36e5821f9ddc238ca984fbc4663/a33f8/15.png\" srcset=\"/static/bfbdc36e5821f9ddc238ca984fbc4663/20f9f/15.png 200w,\n/static/bfbdc36e5821f9ddc238ca984fbc4663/1be51/15.png 400w,\n/static/bfbdc36e5821f9ddc238ca984fbc4663/a33f8/15.png 768w\" sizes=\"(max-width: 768px) 100vw, 768px\"></picture>\n<p>Now we have a minimal working pipeline, with which we can develop our project, with a lot of help from our compiler and eslint in maintaining a good code quality. With this base we can actually start creating an app which we could proudly deploy into a production environment. </p>\n</div>\n<div class=\"tasks\">\n<h3>Exercises 9.10.-9.11.</h3>\n<p><strong>Before you start the exercises</strong></p>\n<p>For this set of exercises you will be developing a backend for an existing project called <i>Diagnoses</i> which is a simple medical record application for the use doctors that handles patient information, diagnoses and basic health information of the patients.</p>\n<p>The frontend has already been built by outsider experts and you're task is to create a backend to support the existing code.</p>\n<p><strong>Note:</strong> From now on you will be working with existing codebase and sometimes it is expected that you use your own skills to find the relevant files and and configurations to proceed in the exercises.</p>\n<p><strong>Note 2:</strong> You will be extending the frontend later on so it is suggested that you fork the repository already now.</p>\n<p><strong>Note 3:</strong> Code quality is extremely important, so take extra good care of that your code is <em>readable</em> and that it can be <em>easily shared</em> and by this, you need to end up with a result that is <em>production ready</em>, so that the built version of the project is working, and no extra dependencies are included in the end result.</p>\n<h4>9.10: Diagnoses backend, step1</h4>\n<p>Initialise a buildable project template called <em>Diagnoses-backend</em> that will be used by the frontend. Configure eslint and tsconfig with the same configurations that are used in the material. </p>\n<p>Set up a endpoint that responses to HTTP GET requests to route <em>/ping</em>.   </p>\n<p>You should also configure auto-reloading.</p>\n<h4>9.11: Diagnoses backend, step2</h4>\n<p>Fork and clone the project <a href=\"git%20clone%20https://github.com/fullstack-hy2020/patientor\">patientor</a>. With the help of the README-file start the project. You should be able to use the frontend without a functioning backend.</p>\n<p>Ensure that backend answers to frontend's ping requests. Check developer tools to make sure it really works: </p>\n<picture><img src=\"/static/8c45cd53af07bd007a5911c788877bbf/14be6/16.png\" srcset=\"/static/8c45cd53af07bd007a5911c788877bbf/4cce7/16.png 200w,\n/static/8c45cd53af07bd007a5911c788877bbf/bae5f/16.png 400w,\n/static/8c45cd53af07bd007a5911c788877bbf/14be6/16.png 800w,\n/static/8c45cd53af07bd007a5911c788877bbf/1b35a/16.png 1200w,\n/static/8c45cd53af07bd007a5911c788877bbf/9ee03/16.png 1600w,\n/static/8c45cd53af07bd007a5911c788877bbf/8c3b5/16.png 1852w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>You might also want to have a look to tab <i>console</i>.</p>\n<p>Set up a build script to your <i>backend</i>, so that you can create a production version of the project and make sure that also it answers to the frontend's ping.</p>\n</div>\n<div class=\"content\">\n<h3>Implementing the functionality</h3>\n<p>Finally we are ready to start writing some code.</p>\n<p>Let's start from basics. Ilari wants to keep track of his experiences on his flight journeys, so it's fairly simple to say that he wants to be able to read and write his experiences.</p>\n<p>What he wants to be able to save, are diary entries that include: </p>\n<ul>\n<li>Date of the entry</li>\n<li>Weather conditions (either good, windy, rainy or stormy)</li>\n<li>Visibility (either good, ok or poor)</li>\n<li>Free text entry of experience</li>\n</ul>\n<p>We already have some example data, which we will use as a guideline on how to develop further. The data is in json format and can be found <a href=\"https://github.com/fullstack-hy2020/misc/blob/master/diaryentries.json\">here</a>.</p>\n<p>Data looks like the following </p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">[</span>\n  <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"id\"</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"date\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"2017-01-01\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"weather\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"rainy\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"visibility\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"poor\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"comment\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Pretty scary flight, I'm glad I'm alive\"</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"id\"</span><span class=\"token operator\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"date\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"2017-04-01\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"weather\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"sunny\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"visibility\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"good\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"comment\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Everything went better than expected, I'm learning much\"</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>  \n  // ...\n<span class=\"token punctuation\">]</span></code></pre></div>\n<p>Let's start by creating an endpoint that returns all flight diary entries. </p>\n<p>At this point it is already important to start thinking of architectural decisions for the project. This query should be answered through a <em>GET</em> request at <em>/api/diaries</em>. First, let's create the general <em>/diaries</em> endpoint file to the project. We will create it into a <em>routes</em>-folder. </p>\n<p>All code usually exists within a folder called <em>src</em>, so actual source code is not mixed up with general configuration files. Let's create a <em>src</em> folder, then move the <em>index.ts</em> file from our project there and finally, we will create a <em>routes</em> folder and a <em>diaries</em> file within the <em>src</em> folder. Also now the <em>npm run dev</em> should be updated to point to the <em>index.ts</em> file in <em>src/index.ts</em>.</p>\n<p>Right now our folder structure should look like this: </p>\n<picture><img src=\"/static/55b10fea8f855c7bda499e802016fc8d/13059/18.png\" srcset=\"/static/55b10fea8f855c7bda499e802016fc8d/3ee0c/18.png 200w,\n/static/55b10fea8f855c7bda499e802016fc8d/06889/18.png 400w,\n/static/55b10fea8f855c7bda499e802016fc8d/13059/18.png 446w\" sizes=\"(max-width: 446px) 100vw, 446px\"></picture>\n<p>Let's start out by creating the first endpoints into the <em>diaries.ts</em> file.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> express <span class=\"token keyword\">from</span> <span class=\"token string\">'express'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> router <span class=\"token operator\">=</span> express<span class=\"token punctuation\">.</span><span class=\"token function\">Router</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nrouter<span class=\"token punctuation\">.</span><span class=\"token keyword\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>_req<span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    res<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Fetching all diaries!'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\nrouter<span class=\"token punctuation\">.</span><span class=\"token function\">post</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>_req<span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    res<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Saving a diary!'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> router<span class=\"token punctuation\">;</span></code></pre></div>\n<p>And then let's route all requests coming with the prefix <em>api/diaries/</em> to that specific router in _index.ts`</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> express <span class=\"token keyword\">from</span> <span class=\"token string\">'express'</span><span class=\"token punctuation\">;</span>\n<span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">import</span> diaryRouter <span class=\"token keyword\">from</span> <span class=\"token string\">'./routes/diaries'</span><span class=\"token punctuation\">;</span></span><span class=\"token keyword\">const</span> app <span class=\"token operator\">=</span> <span class=\"token function\">express</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\napp<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span>express<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token constant\">PORT</span> <span class=\"token operator\">=</span> <span class=\"token number\">3000</span><span class=\"token punctuation\">;</span>\n\napp<span class=\"token punctuation\">.</span><span class=\"token keyword\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/ping'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>_req<span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'someone pinged here'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  res<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token string\">'pong'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"gatsby-highlight-code-line\">app<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/api/diaries'</span><span class=\"token punctuation\">,</span> diaryRouter<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n  \napp<span class=\"token punctuation\">.</span><span class=\"token function\">listen</span><span class=\"token punctuation\">(</span><span class=\"token constant\">PORT</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token string\">`Server running on port </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token constant\">PORT</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>And now when curling localhost:3000/api/diaries we should see the message <i>Fetching all diaries!</i>.</p>\n<p>Now let's add the data accessing diaryservice to the code! Let's create a folder <em>services</em> and add a file called <em>diaryService.ts</em> into the folder. Then, let's start implementing the two methods we need; <em>getAllDiaryEntries</em> and <em>addDiaryEntry</em>. To get all entries, we of course need to access the data. Since we are not using a database, this means we will instad <i>import</i> the pre-defined JSON-file. </p>\n<p>Code looks like the following</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> diaryData <span class=\"token keyword\">from</span> <span class=\"token string\">'../../data/entries.json'</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">getEntries</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> diaryData\n<span class=\"token punctuation\">}</span> \n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">addEntry</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span>\n<span class=\"token punctuation\">}</span> \n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token punctuation\">{</span>\n  getEntries<span class=\"token punctuation\">,</span>\n  addEntry\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>But something is not right</p>\n<picture><img src=\"/static/801364709f5ece74130870d09224fe03/14be6/17b.png\" srcset=\"/static/801364709f5ece74130870d09224fe03/4cce7/17b.png 200w,\n/static/801364709f5ece74130870d09224fe03/bae5f/17b.png 400w,\n/static/801364709f5ece74130870d09224fe03/14be6/17b.png 800w,\n/static/801364709f5ece74130870d09224fe03/1b35a/17b.png 1200w,\n/static/801364709f5ece74130870d09224fe03/4dfbc/17b.png 1496w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>The hint says we might want to use <em>resolveJsonModule</em>. Let's add it to our tsconfig: </p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"compilerOptions\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"target\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"ES6\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"outDir\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"./build/\"</span><span class=\"token punctuation\">,</span> \n    <span class=\"token property\">\"module\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"commonjs\"</span><span class=\"token punctuation\">,</span>  \n    <span class=\"token property\">\"strict\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"noUnusedLocals\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"noUnusedParameters\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>       \n    <span class=\"token property\">\"noImplicitReturns\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"noFallthroughCasesInSwitch\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"esModuleInterop\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token property\">\"resolveJsonModule\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span></span>  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Problems are now gone.</p>\n<p>As before we've seen how the compiler can decide the type of a variable by the value it is being assignet to and in a similar way the compiler interprets larger data sets, objects and arrays. This is why the compiler actually can warn us if we are trying to do something suspicious to the json data we are currently handling. If we're handling an array that includes specific types of objects and we're trying to add an object there that doesn't have all of the fields that the other objects have or is having type conflicts (for example a number where a string should be) the compiler can give us a warning. </p>\n<p>Even though the compiler is pretty intelligent in order to be sure not to do anything unwanted it is safer to create the correct types to the data by yourself.</p>\n<p>Now we have a basic working TypeScript express app but there's barely any actual <i>typings</i> in the code. Since we now have a clear definition on what type of data should be accepted for the weather and visibility fields for the data there is no reason for us not to include also those types in the the code. Let's create our type-exclusive file <em>types.ts</em> in which we'll put all our types in this project.</p>\n<p>First let's type the allowed <em>Weather</em> and <em>Visibility</em> values through a <a href=\"https://www.typescriptlang.org/docs/handbook/advanced-types.html#union-types\">union type</a> with allowed strings: </p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">export</span> type Weather <span class=\"token operator\">=</span> <span class=\"token string\">'sunny'</span> <span class=\"token operator\">|</span> <span class=\"token string\">'rainy'</span> <span class=\"token operator\">|</span> <span class=\"token string\">'cloudy'</span> <span class=\"token operator\">|</span> <span class=\"token string\">'windy'</span> <span class=\"token operator\">|</span> <span class=\"token string\">'stormy'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> type Visibility <span class=\"token operator\">=</span> <span class=\"token string\">'great'</span> <span class=\"token operator\">|</span> <span class=\"token string\">'good'</span> <span class=\"token operator\">|</span> <span class=\"token string\">'ok'</span> <span class=\"token operator\">|</span> <span class=\"token string\">'poor'</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>And from there we can continue to create our own simple DiaryEntry type:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">export</span> type DiaryEntry <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  id<span class=\"token punctuation\">:</span> number<span class=\"token punctuation\">,</span>\n  date<span class=\"token punctuation\">:</span> string<span class=\"token punctuation\">,</span>\n  weather<span class=\"token punctuation\">:</span> Weather<span class=\"token punctuation\">,</span>\n  visibility<span class=\"token punctuation\">:</span> Visibility<span class=\"token punctuation\">,</span>\n  comment<span class=\"token punctuation\">:</span> string<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span> </code></pre></div>\n<p>We can now try to type our imported json: </p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> diaryData <span class=\"token keyword\">from</span> <span class=\"token string\">'../../data/entries.json'</span>\n\n<span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> Weather<span class=\"token punctuation\">,</span> Visibility<span class=\"token punctuation\">,</span> DiaryEntry <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'../types'</span></span>\n<span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">const</span> diaries <span class=\"token punctuation\">:</span> Array<span class=\"token operator\">&lt;</span>DiaryEntry<span class=\"token operator\">></span> <span class=\"token operator\">=</span> diaryData</span>\n<span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">const</span> getEntries <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">:</span> Array<span class=\"token operator\">&lt;</span>DiaryEntry<span class=\"token operator\">></span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">return</span> diaries</span><span class=\"token punctuation\">}</span> \n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">addEntry</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span>\n<span class=\"token punctuation\">}</span> \n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token punctuation\">{</span>\n  getEntries<span class=\"token punctuation\">,</span>\n  addEntry\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>But since the json already has its values declared, assigning a type for the dataset results in an error:</p>\n<picture><img src=\"/static/ecc0ce4bb97018da8c1b12b9cf3d149d/14be6/19a.png\" srcset=\"/static/ecc0ce4bb97018da8c1b12b9cf3d149d/4cce7/19a.png 200w,\n/static/ecc0ce4bb97018da8c1b12b9cf3d149d/bae5f/19a.png 400w,\n/static/ecc0ce4bb97018da8c1b12b9cf3d149d/14be6/19a.png 800w,\n/static/ecc0ce4bb97018da8c1b12b9cf3d149d/1b35a/19a.png 1200w,\n/static/ecc0ce4bb97018da8c1b12b9cf3d149d/15896/19a.png 1358w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>Since the <em>weather</em> (and <em>visibility</em>) fields both have been typed by us in the <em>DiaryEntry</em> type declaration and by the TypeScript compiler itself, a conflict arises. This can be surpassed if we are certain that we know what we are doing by <a href=\"\">type assertion</a>. Let's assert the type of the variable <em>diaries</em> to the DiaryData object with the keyword <em>as</em> and everything should work: </p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> diaryData <span class=\"token keyword\">from</span> <span class=\"token string\">'../../data/entries.json'</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> Weather<span class=\"token punctuation\">,</span> Visibility<span class=\"token punctuation\">,</span> DiaryEntry <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'../types'</span>\n\n<span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">const</span> diaries <span class=\"token operator\">=</span> diaryData <span class=\"token keyword\">as</span> Array<span class=\"token operator\">&lt;</span>DiaryEntry<span class=\"token operator\">></span><span class=\"token punctuation\">;</span></span>\n<span class=\"token keyword\">const</span> getEntries <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">:</span> Array<span class=\"token operator\">&lt;</span>DiaryEntry<span class=\"token operator\">></span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> diaries\n<span class=\"token punctuation\">}</span> \n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">addEntry</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span>\n<span class=\"token punctuation\">}</span> \n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token punctuation\">{</span>\n  getEntries<span class=\"token punctuation\">,</span>\n  addEntry\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Type assertion should not be used unless there's no other way to proceed since there's always the danger of asserting an unfit type to an object and then trusting the assreted type. While the compiler trusts you to know when using <em>as</em>, at the same time it leaves the intelligence of the whole TypeScript to manual interpretation. </p>\n<p>In our case we could change our data exportation method so that we can have the typing happen naturally within the variable declaration file. Since typings are not valid in a JSON-file, we should convert the json-file to a ts-file which exports the typed object-format data in the following way: </p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> DiaryEntry <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"../src/types\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> diaryEntries<span class=\"token punctuation\">:</span> Array<span class=\"token operator\">&lt;</span>DiaryEntry<span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n  <span class=\"token punctuation\">{</span>\n    <span class=\"token string\">\"id\"</span><span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"date\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"2017-01-01\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"weather\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"rainy\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"visibility\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"poor\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"comment\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"Pretty scary flight, I'm glad I'm alive\"</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">]</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> diaryData<span class=\"token punctuation\">;</span></code></pre></div>\n<p>When we now import the array, it is already intelligently interpreted so that even the <em>weather</em> and <em>visibility</em> fields are understood correctly:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">import</span> diaries <span class=\"token keyword\">from</span> <span class=\"token string\">'../../data/entries.ts'</span></span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> Weather<span class=\"token punctuation\">,</span> Visibility<span class=\"token punctuation\">,</span> DiaryEntry <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'../types'</span>\n\n<span class=\"token keyword\">const</span> getEntries <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">:</span> Array<span class=\"token operator\">&lt;</span>DiaryEntry<span class=\"token operator\">></span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">return</span> diaries</span><span class=\"token punctuation\">}</span> \n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">addEntry</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span>\n<span class=\"token punctuation\">}</span> \n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token punctuation\">{</span>\n  getEntries<span class=\"token punctuation\">,</span>\n  addEntry\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Note that, if we want to reserve the opportunity to save also entries without a field, e.g. <em>comment</em>, we could set type field as optional by adding <em>?</em> to the type declaration: </p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">type DiaryEntry <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  id<span class=\"token punctuation\">:</span> number<span class=\"token punctuation\">,</span>\n  date<span class=\"token punctuation\">:</span> string<span class=\"token punctuation\">,</span>\n  weather<span class=\"token punctuation\">:</span> Weather<span class=\"token punctuation\">,</span>\n  visibility<span class=\"token punctuation\">:</span> Visibility<span class=\"token punctuation\">,</span>\n  comment<span class=\"token operator\">?</span><span class=\"token punctuation\">:</span> string<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span> </code></pre></div>\n<h3>Utility Types</h3>\n<p>Sometimes we end up in a situation where we want to use a specific modification of a type. For example consider using a general listing page for data that has some non-sensitive and some  sensitive data. In a common listing page we might want to be sure that no sensitive data is being used or shown so we might only <i>pick</i> the fields of a type we allow to be used in that situation. For that we use the utility type <a href=\"http://www.typescriptlang.org/docs/handbook/utility-types.html#picktk\">Pick</a>.</p>\n<p>In our example we should consider that Ilari might want to create a frontend listing of all his diary entries excluding the comment field, since during a very scary flight he might end up writing there something he wouldn't necessarily want to show anyone else.</p>\n<p>The <a href=\"http://www.typescriptlang.org/docs/handbook/utility-types.html#picktk\">Pick</a> utility type allows us to choose what fields of a type we want to use of the existing type. Pick can be used to construct a completely new type or just in time when informing a function what it should return, as any other typings can be used. Utility types are special kinds of type tools, but they are used exactly as regular types are.</p>\n<p>In this case, in order to create this kind of \"narrowed\" version of the Entry type we could just use the Pick in the function declaration:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> getNonSensitiveEntries <span class=\"token operator\">=</span> \n  <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> Array<span class=\"token operator\">&lt;</span>Pick<span class=\"token operator\">&lt;</span>DiaryEntry<span class=\"token punctuation\">,</span> <span class=\"token string\">'id'</span> <span class=\"token operator\">|</span> <span class=\"token string\">'date'</span> <span class=\"token operator\">|</span> <span class=\"token string\">'weather'</span> <span class=\"token operator\">|</span> <span class=\"token string\">'visibility'</span><span class=\"token operator\">>></span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// ...</span>\n  <span class=\"token punctuation\">}</span></code></pre></div>\n<p>and it would expect the function to return an array of the modification of DiaryEntry type which includes only the four declared fields. </p>\n<p>Since <a href=\"http://www.typescriptlang.org/docs/handbook/utility-types.html#picktk\">Pick</a> requires the type it modifies to be given as a <a href=\"http://www.typescriptlang.org/docs/handbook/generics.html#working-with-generic-type-variables\">type variable</a>, simillar as the Array, we have now two nested type variables and the syntax looks already a bit odd. We can improve the readability by using the <a href=\"http://www.typescriptlang.org/docs/handbook/basic-types.html#array\">alternative</a> syntax of arrays:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> getNonSensitiveEntries <span class=\"token operator\">=</span> \n  <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> Pick<span class=\"token operator\">&lt;</span>DiaryEntry<span class=\"token punctuation\">,</span> <span class=\"token string\">'id'</span> <span class=\"token operator\">|</span> <span class=\"token string\">'date'</span> <span class=\"token operator\">|</span> <span class=\"token string\">'weather'</span> <span class=\"token operator\">|</span> <span class=\"token string\">'visibility'</span><span class=\"token operator\">></span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// ...</span>\n  <span class=\"token punctuation\">}</span></code></pre></div>\n<p>Even better in this case when we want to exclude only one field, would be to use the <em>Omit</em> utility type, for which you can declare what fields to exclude:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> getNonSensitiveEntries <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> Omit<span class=\"token operator\">&lt;</span>DiaryEntry<span class=\"token punctuation\">,</span> <span class=\"token string\">'comment'</span><span class=\"token operator\">></span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Another way would be to declare a completely new type for the <em>NonSensitiveDiaryEntry</em>:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">type NonSesitiveDiaryEntry <span class=\"token operator\">=</span> Omit<span class=\"token operator\">&lt;</span>DiaryEntry<span class=\"token punctuation\">,</span> <span class=\"token string\">'comment'</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>The code is now</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> diaries <span class=\"token keyword\">from</span> <span class=\"token string\">'../../data/entries.js'</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> NonSesitiveDiaryEntry<span class=\"token punctuation\">,</span> DiaryEntry <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'../types'</span>\n\n<span class=\"token keyword\">const</span> getEntries <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">:</span> DiaryEntry<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> diaries\n<span class=\"token punctuation\">}</span> \n\n<span class=\"token keyword\">const</span> getNonSensitiveEntries <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> NonSesitiveDiaryEntry<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> diaries\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">addDiaryEntry</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span> \n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token punctuation\">{</span>\n  getEntries<span class=\"token punctuation\">,</span>\n  getNonSensitiveEntries<span class=\"token punctuation\">,</span>\n  addDiaryEntry\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>One thing causes us a bit of concern. In there function <em>getNonSensitiveEntries</em> we are returning the complete entries of diaries and <i>no error is given</i> despite typing!</p>\n<p>This is because TypeScript can only check whether we have all the wanted fields or not, but excess fields are not prohibited. In our case it means that it is <i>not prohibited</i> to return the DiaryEntry[] type object, but if we were to try to get a hold of the field <i>comment</i> where the diary is returned, it would not be restricted since it would be pointing to a field that TypeScript is unaware of even though it exists.</p>\n<p>Unfortunately this can lead to unwanted behaviour if you are not aware of what you are doing; this situation is valid in terms of TypeScript but is most likely allowing use that is not wanted. If we now return all of the diaryEntries from the function <em>getNonSensitiveEntries</em> as they are to <i>frontend</i>, we are actually leaking the unwanted fields for the requesting browser even though our types imply otherwise!</p>\n<p>Because TypeScript doesn't modify the actual data but only types it, we need to implement the exclusion of the fields:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> diaries <span class=\"token keyword\">from</span> <span class=\"token string\">'../../data/entries.js'</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> NonSesitiveDiaryEntry<span class=\"token punctuation\">,</span> DiaryEntry <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'../types'</span>\n\n<span class=\"token keyword\">const</span> getEntries <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">:</span> DiaryEntry<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> diaries\n<span class=\"token punctuation\">}</span> \n\n<span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">const</span> getNonSensitiveEntries <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">:</span> NonSesitiveDiaryEntry <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">return</span> diaries<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> id<span class=\"token punctuation\">,</span> date<span class=\"token punctuation\">,</span> weather<span class=\"token punctuation\">,</span> visibility <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">    id<span class=\"token punctuation\">,</span></span><span class=\"gatsby-highlight-code-line\">    date<span class=\"token punctuation\">,</span></span><span class=\"gatsby-highlight-code-line\">    weather<span class=\"token punctuation\">,</span></span><span class=\"gatsby-highlight-code-line\">    visibility<span class=\"token punctuation\">,</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></span><span class=\"gatsby-highlight-code-line\"><span class=\"token punctuation\">}</span></span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">addDiaryEntry</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span> \n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token punctuation\">{</span>\n  getEntries<span class=\"token punctuation\">,</span>\n  getNonSensitiveEntries<span class=\"token punctuation\">,</span>\n  addDiaryEntry\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>If we were to try returning this data with the basic <em>DiaryEntry</em> type, that is, if we would type the function as follows</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> getNonSensitiveEntries <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">:</span> DiaryEntry<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span></code></pre></div>\n<p>we would get the following error:</p>\n<picture><img src=\"/static/99355b781944f71125e24034c759256f/14be6/22a.png\" srcset=\"/static/99355b781944f71125e24034c759256f/4cce7/22a.png 200w,\n/static/99355b781944f71125e24034c759256f/bae5f/22a.png 400w,\n/static/99355b781944f71125e24034c759256f/14be6/22a.png 800w,\n/static/99355b781944f71125e24034c759256f/1b35a/22a.png 1200w,\n/static/99355b781944f71125e24034c759256f/8de54/22a.png 1390w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>Utility types includes a large set of handy tools and it is definitely worthwhile to take some time studying <a href=\"https://www.typescriptlang.org/docs/handbook/utility-types.html\">their documentation</a>.</p>\n<p>Finally we can complete the route that shows all diery entries:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> express <span class=\"token keyword\">from</span> <span class=\"token string\">'express'</span><span class=\"token punctuation\">;</span>\n<span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">import</span> diaryService <span class=\"token keyword\">from</span> <span class=\"token string\">'../services/diaryService'</span></span>\n<span class=\"token keyword\">const</span> router <span class=\"token operator\">=</span> express<span class=\"token punctuation\">.</span><span class=\"token function\">Router</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nrouter<span class=\"token punctuation\">.</span><span class=\"token keyword\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>_req<span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">  res<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span>diaryService<span class=\"token punctuation\">.</span><span class=\"token function\">getNonSensitiveEntries</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\nrouter<span class=\"token punctuation\">.</span><span class=\"token function\">post</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>_req<span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    res<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Saving a diary!'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> router<span class=\"token punctuation\">;</span></code></pre></div>\n<p>The response looks like as we expect</p>\n<picture><img src=\"/static/2874edda399d6b828630de1496dbc188/14be6/26.png\" srcset=\"/static/2874edda399d6b828630de1496dbc188/4cce7/26.png 200w,\n/static/2874edda399d6b828630de1496dbc188/bae5f/26.png 400w,\n/static/2874edda399d6b828630de1496dbc188/14be6/26.png 800w,\n/static/2874edda399d6b828630de1496dbc188/1b35a/26.png 1200w,\n/static/2874edda399d6b828630de1496dbc188/9ee03/26.png 1600w,\n/static/2874edda399d6b828630de1496dbc188/957b7/26.png 1618w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n</div>\n<div class=\"tasks\">\n<h3>Exercises 9.12.-9.13.</h3>\n<p>Simillarly to Ilari's flight service, we do not use a real database in our app but instead use hardcoded data, that is in the files <a href=\"https://github.com/fullstack-hy2020/misc/blob/master/diagnoses.json\">diagnoses.json</a> and <a href=\"https://github.com/fullstack-hy2020/misc/blob/master/patientdata.json\">patientdata.json</a>. Download the files and store those into a folder called <em>data</em>. All data modification can be done in runtime memory, so during this part it is <i>not necessary to write to a file</i>.</p>\n<h4>9.12: Diagnoses backend, step3</h4>\n<p>Create a type <em>Diagnose</em> and use it to create endpoint <em>/api/diagnoses</em> for fetching all diagnoses with HTTP GET.</p>\n<p>Structure your code properly by using meaninfully named directories and files.</p>\n<p><strong>Note</strong> that <em>diagnoses</em> may or may not contain the field <em>latin</em>. You might want to use <a href=\"https://www.typescriptlang.org/docs/handbook/interfaces.html#optional-properties\">optional properties</a> in the type definition.</p>\n<h4>9.13: Diagnoses backend, step4</h4>\n<p>Create data type <em>Patient</em> and set up a GET-endpoint <em>/api/patients</em> that returns all patients to the frontend excluding field <em>ssn</em>. Use a <a href=\"https://www.typescriptlang.org/docs/handbook/utility-types.html\">utility type</a> to make sure you are selecting and returning only the wanted.</p>\n<p>Try the endpoint with browser and make sure that <em>ssn</em> is not included in response.</p>\n<p>After creating the endpoint, ensure that the <i>frontend</i> shows the list of patients.</p>\n</div>\n<div class=\"content\">\n<h3>Preventing an accidental undefined result</h3>\n<p>Let us expand the backend to support fetching one specific entry with a HTTP GET request to route <em>/api/diaries/:id</em> e</p>\n<p>The DiaryService needs to be extended with  <em>findById</em>-function:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// ...</span>\n\n<span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">const</span> findById <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">:</span> number<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> DiaryEntry <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">const</span> entry <span class=\"token operator\">=</span> diaries<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span>d <span class=\"token operator\">=></span> d<span class=\"token punctuation\">.</span>id <span class=\"token operator\">===</span> id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">return</span> entry<span class=\"token punctuation\">;</span></span><span class=\"gatsby-highlight-code-line\"><span class=\"token punctuation\">}</span></span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token punctuation\">{</span>\n  getEntries<span class=\"token punctuation\">,</span>\n  getNonSensitiveEntries<span class=\"token punctuation\">,</span>\n  addDiaryEntry<span class=\"token punctuation\">,</span>\n<span class=\"gatsby-highlight-code-line\">  findById</span><span class=\"token punctuation\">}</span></code></pre></div>\n<p>But once again, a new problem comes to light:</p>\n<picture><img src=\"/static/ffec5cdfddb4a1c59d7cab5702849a32/14be6/23e.png\" srcset=\"/static/ffec5cdfddb4a1c59d7cab5702849a32/4cce7/23e.png 200w,\n/static/ffec5cdfddb4a1c59d7cab5702849a32/bae5f/23e.png 400w,\n/static/ffec5cdfddb4a1c59d7cab5702849a32/14be6/23e.png 800w,\n/static/ffec5cdfddb4a1c59d7cab5702849a32/1b35a/23e.png 1200w,\n/static/ffec5cdfddb4a1c59d7cab5702849a32/e4e45/23e.png 1312w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>The thing with this request is that it can also return undefined - there is no absolute guarantee that an entry with the specific id can be found. This is a great thing to come up, since without TypeScript there would be no indication of this possibility and in the worst case you might end up returning a result of an <em>undefined</em> object instead of informing of a not found situation in a reasonable way.</p>\n<p>In cases like this we first of all need to decide what is the desired return value if an object is not found, and how to handle the case. The value <em>undefined</em> that is returned by <em>find</em>-method of an array is fine for us if a result is not found so we could solve our problem by typing the return value as follows</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">const</span> findById <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">:</span> number<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> DiaryEntry <span class=\"token operator\">|</span> undefined <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span></span>  <span class=\"token keyword\">const</span> entry <span class=\"token operator\">=</span> diaries<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span>d <span class=\"token operator\">=></span> d<span class=\"token punctuation\">.</span>id <span class=\"token operator\">===</span> id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> entry<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>The route handler is the following</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> express <span class=\"token keyword\">from</span> <span class=\"token string\">'express'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> diaryService <span class=\"token keyword\">from</span> <span class=\"token string\">'../services/diaryService'</span>\n\nrouter<span class=\"token punctuation\">.</span><span class=\"token keyword\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/:id'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> diary <span class=\"token operator\">=</span> diaryService<span class=\"token punctuation\">.</span><span class=\"token function\">findById</span><span class=\"token punctuation\">(</span><span class=\"token function\">Number</span><span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">.</span>params<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>diary<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    res<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span>diary<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    res<span class=\"token punctuation\">.</span><span class=\"token function\">sendStatus</span><span class=\"token punctuation\">(</span><span class=\"token number\">404</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// ...</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> router<span class=\"token punctuation\">;</span></code></pre></div>\n<h3>Adding a new diary</h3>\n<p>Let's start building the <em>post</em> endpoint for adding flight diary entries. The accepted values should confirm to the example data.</p>\n<p>The code handling the response looks as follows</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">router<span class=\"token punctuation\">.</span><span class=\"token function\">post</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> date<span class=\"token punctuation\">,</span> weather<span class=\"token punctuation\">,</span> visibility<span class=\"token punctuation\">,</span> comment <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> req<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> newDiaryEntry <span class=\"token operator\">=</span> diaryService<span class=\"token punctuation\">.</span><span class=\"token function\">addDiaryEntry</span><span class=\"token punctuation\">(</span>\n    date<span class=\"token punctuation\">,</span>\n    weather<span class=\"token punctuation\">,</span>\n    visibility<span class=\"token punctuation\">,</span>\n    comment<span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  res<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span>newDiaryEntry<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>corresponding method in <em>diaryService</em> looks like this</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> addDiaryEntry <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>\n    date<span class=\"token punctuation\">:</span> string<span class=\"token punctuation\">,</span> weather<span class=\"token punctuation\">:</span> Weather<span class=\"token punctuation\">,</span> visibility<span class=\"token punctuation\">:</span> Visibility<span class=\"token punctuation\">,</span> comment<span class=\"token punctuation\">:</span> string\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> DiaryEntry <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    \n  <span class=\"token keyword\">const</span> newDiaryEntry <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    id<span class=\"token punctuation\">:</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>diaries<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span>d <span class=\"token operator\">=></span> d<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n    date<span class=\"token punctuation\">,</span>\n    weather<span class=\"token punctuation\">,</span>\n    visibility<span class=\"token punctuation\">,</span>\n    comment<span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span>\n  \n  diaries<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>newDiaryEntry<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> newDiaryEntry<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>As we can see the <em>addDiaryEntry</em> function is growing to be pretty hard to read, when having all the fields as separate parameters. It might be better to just send the data as an object to the function:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">router<span class=\"token punctuation\">.</span><span class=\"token function\">post</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> date<span class=\"token punctuation\">,</span> weather<span class=\"token punctuation\">,</span> visibility<span class=\"token punctuation\">,</span> comment <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> req<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">;</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">const</span> newDiaryEntry <span class=\"token operator\">=</span> diaryService<span class=\"token punctuation\">.</span><span class=\"token function\">addDiaryEntry</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span></span>    date<span class=\"token punctuation\">,</span>\n    weather<span class=\"token punctuation\">,</span>\n    visibility<span class=\"token punctuation\">,</span>\n    comment<span class=\"token punctuation\">,</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>  res<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span>newDiaryEntry<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>But wait, what is the type of this object? It is not exactly a DiaryEntry, since it is still missign the <em>id</em> field. It could be useful for us just to create a new type <em>NewDiaryEntry</em> which could work as a type for the not-yet saved Entry-object. Let us create the new type in our <em>types.ts</em>-file using the existing <em>DiaryEntry</em> object with the <em>Omit</em> utility type:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">export</span> type NewDiaryEntry <span class=\"token operator\">=</span> Omit<span class=\"token operator\">&lt;</span>DiaryEntry<span class=\"token punctuation\">,</span> <span class=\"token string\">'id'</span><span class=\"token operator\">></span></code></pre></div>\n<p>And now we can use this type in our DiaryService and we can just destructure the whole new entry object when creating the entry to be saved: </p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> NewDiaryEntry<span class=\"token punctuation\">,</span> NonSesitiveDiaryEntry<span class=\"token punctuation\">,</span> DiaryEntry <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'../types'</span></span>\n<span class=\"token comment\">// ...</span>\n\n<span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">const</span> addDiaryEntry <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span> entry <span class=\"token punctuation\">:</span> NewDiaryEntry <span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> DiaryEntry <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span></span>  <span class=\"token keyword\">const</span> newDiaryEntry <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    id<span class=\"token punctuation\">:</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>diaries<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span>d <span class=\"token operator\">=></span> d<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token operator\">...</span>entry</span>  <span class=\"token punctuation\">}</span>\n  \n  diaries<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>newDiaryEntry<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> newDiaryEntry<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Now the code looks much cleaner! </p>\n<p>In order to parse the incoming data we must have the  <em>json</em> middleware configured:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> express <span class=\"token keyword\">from</span> <span class=\"token string\">'express'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> diaryRouter <span class=\"token keyword\">from</span> <span class=\"token string\">'./routes/diaries'</span><span class=\"token punctuation\">;</span> \n<span class=\"token keyword\">const</span> app <span class=\"token operator\">=</span> <span class=\"token function\">express</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"gatsby-highlight-code-line\">app<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span>express<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"token keyword\">const</span> <span class=\"token constant\">PORT</span> <span class=\"token operator\">=</span> <span class=\"token number\">3000</span><span class=\"token punctuation\">;</span>\n\napp<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/api/diaries'</span><span class=\"token punctuation\">,</span> diaryRouter<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\napp<span class=\"token punctuation\">.</span><span class=\"token function\">listen</span><span class=\"token punctuation\">(</span><span class=\"token constant\">PORT</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token string\">`Server running on port </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token constant\">PORT</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>and now the application is ready to receive HTTP POST requests for adding diaries with the desired fields!</p>\n<h3>Proofing your requests</h3>\n<p>There are a plenty of things that can go wrong when accepting data from an outside source. Applications work rarely fully on their own and we are forced to live with the fact that data sources outside of a single system cannot be fully trusted. When the data is coming from an outside source, there's no way that it can be already typed when we receive it so we need to make decision on how to handle the uncertainty that comes with the data.</p>\n<p>The way express handles parsing the request body is that it asserts the type <a href=\"http://www.typescriptlang.org/docs/handbook/basic-types.html#any\">any</a> to all the body fields. In our situation this doesn't come apparent in any way in the editor, but if we start looking at the variables more closely and hover on any of them, we can see that each of them is <a href=\"http://www.typescriptlang.org/docs/handbook/basic-types.html#any\">any</a> and the editor doesn't complain when giving them to <em>addDiaryEntry</em> as arguments: </p>\n<picture><img src=\"/static/991e3e29e34d9f6956d04d862f5b78f6/14be6/27.png\" srcset=\"/static/991e3e29e34d9f6956d04d862f5b78f6/4cce7/27.png 200w,\n/static/991e3e29e34d9f6956d04d862f5b78f6/bae5f/27.png 400w,\n/static/991e3e29e34d9f6956d04d862f5b78f6/14be6/27.png 800w,\n/static/991e3e29e34d9f6956d04d862f5b78f6/1b35a/27.png 1200w,\n/static/991e3e29e34d9f6956d04d862f5b78f6/ffa3e/27.png 1486w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>The value of type <a href=\"http://www.typescriptlang.org/docs/handbook/basic-types.html#an\">any</a> can be assigned to <i>any</i> type of variable since it <i>might be</i> the wanted type. This is definitiely not safe to trust so\ncheck the incoming values (regardless whether we are using TypeScript or not).</p>\n<p>We could just add simple <i>exists</i> and <i>is-value-valid</i> checks to the function defining the route but since we also need to ensure that <em>Weather</em> and <em>Visibility</em> values are of the correct form, it is better to write the put the parsing and validation logic to a separate file <em>utils.ts</em>.</p>\n<p>Our intention is to define a function <em>toNewDiaryEntry</em> that gets the request body as a parameter and returns a properly typed <em>NewDiaryEntry</em>. Route definition uses the function as follows</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">import</span> toNewDiaryEntry <span class=\"token keyword\">from</span> <span class=\"token string\">'../utils'</span></span>\n<span class=\"token comment\">// ...</span>\n\nrouter<span class=\"token punctuation\">.</span><span class=\"token function\">post</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">const</span> newDiaryEntry <span class=\"token operator\">=</span> <span class=\"token function\">toNewDiaryEntry</span><span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>      \n<span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">const</span> addedEntry <span class=\"token operator\">=</span> diaryService<span class=\"token punctuation\">.</span><span class=\"token function\">addDiaryEntry</span><span class=\"token punctuation\">(</span>newDiaryEntry<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>    res<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span>addedEntry<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">e</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    res<span class=\"token punctuation\">.</span><span class=\"token function\">status</span><span class=\"token punctuation\">(</span><span class=\"token number\">404</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span>message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Since we are now making trustworthy code and trying to make sure that we are getting exactly what we want from the requests we should get started with the goal of parsing and validating each field we are waiting for. </p>\n<p>The skeleton of the function <em>addDiaryEntry</em> looks like the following:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> NewDiaryEntry <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./types'</span>\n\n<span class=\"token keyword\">const</span> toNewDiaryEntry <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>object<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">:</span> NewDiaryEntry <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> newEntry<span class=\"token punctuation\">:</span> NewDiaryEntry <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// ...</span>\n  <span class=\"token punctuation\">}</span>\n  \n  <span class=\"token keyword\">return</span> newEntry\n<span class=\"token punctuation\">}</span> \n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> toNewDiaryEntry<span class=\"token punctuation\">;</span></code></pre></div>\n<p>In the function we want to parse the each field and make sure that what we is returned is exactly the type <em>NewDiaryEntry</em>. Thus we should check each field separately. </p>\n<p>Once again we have a typing issue: what is the <em>object</em> type? Since the <em>object</em> is in fact the body of a request, express has typed it with <em>any</em>. Since within this file the whole idea is to map unknown types of fields to correct ones and check whether they are defined as expected, this might be the rare case where we actually <i>want to allow the <em>any</em> type</i>. </p>\n<p>However if we type the object to <em>any</em>, eslint gives us a complaint:</p>\n<picture><img src=\"/static/3fe6ce7c383db627063b023872c7e86b/14be6/24e.png\" srcset=\"/static/3fe6ce7c383db627063b023872c7e86b/4cce7/24e.png 200w,\n/static/3fe6ce7c383db627063b023872c7e86b/bae5f/24e.png 400w,\n/static/3fe6ce7c383db627063b023872c7e86b/14be6/24e.png 800w,\n/static/3fe6ce7c383db627063b023872c7e86b/1b35a/24e.png 1200w,\n/static/3fe6ce7c383db627063b023872c7e86b/ffdc4/24e.png 1504w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>The cause for the complaint is eslit-rule <a href=\"https://github.com/typescript-eslint/typescript-eslint/blob/master/packages/eslint-plugin/docs/rules/no-explicit-any.md\">no-explicit-any</a> that prevents us form explicitly setting type to be any. Since this is in general a good rule to follow but just in this particular file undesired, it is better to allow using any now by disabling the eslint-rule in the file. This happens by adding the following line at the file:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">/* eslint-disable @typescript-eslint/no-explicit-any */</span></code></pre></div>\n<p>Let us start creating the parsers for each of the fields of <em>object</em>.</p>\n<p>To validate the <em>comment</em> field we need to check that it exists, and to ensure that it is of the type <em>string</em>.</p>\n<p>The function should look something like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> parseComment <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>comment<span class=\"token punctuation\">:</span> any<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> string <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>comment <span class=\"token operator\">||</span> <span class=\"token operator\">!</span><span class=\"token function\">isValidString</span><span class=\"token punctuation\">(</span>comment<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Incorrect or missing comment: '</span> <span class=\"token operator\">+</span> comment<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> comment\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Function gets the parameter of the type <em>any</em> type and returns it as type <em>string</em> if it exists and is of the right type.</p>\n<p>The string validation function looks like this</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> isString <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>text<span class=\"token punctuation\">:</span> any<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> text is string <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">typeof</span> text <span class=\"token operator\">===</span> <span class=\"token string\">'string'</span> <span class=\"token operator\">||</span> text <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">String</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>The function is so called <a href=\"https://www.typescriptlang.org/docs/handbook/advanced-types.html#user-defined-type-guards\">type guard</a>, that is, a function that is returning a boolean <i>and</i> which has a <i>type predicate</i> as the return type. In our case the type predicate is</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">text is string</code></pre></div>\n<p>The general form of a type predicate is <em>parameterName is Type</em> where the <em>parameterName</em> is the name of the function parameter and <em>Type</em> is the targetted type.</p>\n<p>If the type guard function returns true, the TypeScript compiler knows that the tested variable has the type that was defined in the type predicate. </p>\n<p>Before the type guard is called, the actual type of the variable <em>comment</em> is not known:</p>\n<picture><img src=\"/static/3db4e2a6092268e6df2afea9e1e2ec4a/14be6/28.png\" srcset=\"/static/3db4e2a6092268e6df2afea9e1e2ec4a/4cce7/28.png 200w,\n/static/3db4e2a6092268e6df2afea9e1e2ec4a/bae5f/28.png 400w,\n/static/3db4e2a6092268e6df2afea9e1e2ec4a/14be6/28.png 800w,\n/static/3db4e2a6092268e6df2afea9e1e2ec4a/1b35a/28.png 1200w,\n/static/3db4e2a6092268e6df2afea9e1e2ec4a/f6157/28.png 1468w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>But after the call, if the code proceeds past the exception (that is the type guard returned true), compiler knows that <em>comment</em> is of the type <em>string</em>:</p>\n<picture><img src=\"/static/41dca0199b104245c6d764a59c175fb7/14be6/29.png\" srcset=\"/static/41dca0199b104245c6d764a59c175fb7/4cce7/29.png 200w,\n/static/41dca0199b104245c6d764a59c175fb7/bae5f/29.png 400w,\n/static/41dca0199b104245c6d764a59c175fb7/14be6/29.png 800w,\n/static/41dca0199b104245c6d764a59c175fb7/1b35a/29.png 1200w,\n/static/41dca0199b104245c6d764a59c175fb7/e34fe/29.png 1456w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>Why do we have two conditions in the string type guard:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> isString <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>text<span class=\"token punctuation\">:</span> any<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> text is string <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">return</span> <span class=\"token keyword\">typeof</span> text <span class=\"token operator\">===</span> <span class=\"token string\">'string'</span> <span class=\"token operator\">||</span> text <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">String</span></span><span class=\"token punctuation\">}</span></code></pre></div>\n<p>would it not be enought to write the guard like this</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> isString <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>text<span class=\"token punctuation\">:</span> any<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> text is string <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">typeof</span> text <span class=\"token operator\">===</span> <span class=\"token string\">'string'</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>The more simple form is most likely good for all practical purposes. However if we want to be absolutely sure, both the conditions are needed, since there is two different means to create string objects in JavaScript and both of these work a bit differently with respect to operators <em>typeof</em> and <em>instanceof</em>:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> a <span class=\"token operator\">=</span> <span class=\"token string\">\"I'm a string primitive\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> b <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"I'm a String Object\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">typeof</span> a<span class=\"token punctuation\">;</span> <span class=\"token operator\">--</span><span class=\"token operator\">></span> returns <span class=\"token string\">'string'</span>\n<span class=\"token keyword\">typeof</span> b<span class=\"token punctuation\">;</span> <span class=\"token operator\">--</span><span class=\"token operator\">></span> returns <span class=\"token string\">'object'</span>\na <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">--</span><span class=\"token operator\">></span> returns <span class=\"token boolean\">false</span>\nb <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">--</span><span class=\"token operator\">></span> returns <span class=\"token boolean\">true</span></code></pre></div>\n<p>It is however unlikely that anybody creates strings with a constructor function, so most likely the simpler version of the type guard would be just fine. </p>\n<p>Next let us consider the field <em>date</em>. Parsing and validating the date object is pretty similar, since TypeScript doesn't really know a type for date, we need to treat it as as <em>string</em>. We still definitely should use JavaScript level validation to check whether the date format is acceptable. </p>\n<p>We will add the following functions</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> isDate <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>date<span class=\"token punctuation\">:</span> string<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> boolean <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token function\">Boolean</span><span class=\"token punctuation\">(</span>Date<span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span>date<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> parseDate <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>date<span class=\"token punctuation\">:</span> any<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> string <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>date <span class=\"token operator\">||</span> <span class=\"token operator\">!</span><span class=\"token function\">isString</span><span class=\"token punctuation\">(</span>date<span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> <span class=\"token operator\">!</span><span class=\"token function\">isDate</span><span class=\"token punctuation\">(</span>date<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Incorrect or missing date: '</span> <span class=\"token operator\">+</span> date<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> date<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Nothing really special here, only thing is that we can't use a type guard since a date is in this case considered only a <em>string</em>. Notice that even though the <em>date</em> variable is accepted as <em>any</em> by the <em>parseDate</em> function, after checking the type with <em>isdString</em> the type is already a string which is why we are able to give the variable to the function <em>isDate</em> with the type <em>string</em> without any errors.</p>\n<p>Finally we are ready to move on to the last two types, Weather and Visibility.</p>\n<p>We would like the validation and parsing to work as follows:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> parseWeather <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>weather<span class=\"token punctuation\">:</span> any<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> Weather <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>weather <span class=\"token operator\">||</span> <span class=\"token operator\">!</span><span class=\"token function\">isString</span><span class=\"token punctuation\">(</span>weather<span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> <span class=\"token operator\">!</span><span class=\"token function\">isWeather</span><span class=\"token punctuation\">(</span>weather<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Incorrect or missing weather: '</span> <span class=\"token operator\">+</span> weather<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span> \n  <span class=\"token keyword\">return</span> weather<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>The question now is, how can we validate that the string is of a specific form? One possible way of writing the type guard would be following:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> isWeather <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">:</span> any<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> str is Weather <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'sunny'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'rainy'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'cloudy'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'stormy'</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">includes</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>This would work just fine but the problem is that list of possible weathers does not necessarily stay in sync with the type definition if that is altered. This is most certainly not a nice thing since we would like to have just a single source for all possible weather types.</p>\n<p>A better solution in this case is to improve the actual Weather type and instead of type declaration use the TypeScript <a href=\"https://www.typescriptlang.org/docs/handbook/enums.html\">enum</a> which allows us to use the actual values in the running code, not only in the compilation phase.</p>\n<p>Let us redefine the type <em>Weather</em> as follows: </p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">enum</span> Weather <span class=\"token punctuation\">{</span>\n  Sunny <span class=\"token operator\">=</span> <span class=\"token string\">'sunny'</span><span class=\"token punctuation\">,</span>\n  Rainy <span class=\"token operator\">=</span> <span class=\"token string\">'rainy'</span><span class=\"token punctuation\">,</span>\n  Cloudy <span class=\"token operator\">=</span> <span class=\"token string\">'cloudy'</span><span class=\"token punctuation\">,</span>\n  Stormy <span class=\"token operator\">=</span> <span class=\"token string\">'stormy'</span><span class=\"token punctuation\">,</span> \n  Windy <span class=\"token operator\">=</span> <span class=\"token string\">'windy'</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>This allows us to check that a string confirms to the accepted values of the Weather enum type and the type guard can be changed to following</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> isWeather <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>param<span class=\"token punctuation\">:</span> any<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> param is Weather <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">values</span><span class=\"token punctuation\">(</span>Weather<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">includes</span><span class=\"token punctuation\">(</span>param<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>One thing to notice here is that we have changed the parameter type to <em>any</em>, if it would be string, the <em>includes</em> check would not compile. The change makes sense also if you think about the reusability of the function, by allowing <em>any</em> as a parameter, we can use the function with confidence knowing that whatever we might feed to it, the function answers always to the question of whether the variable is a valid weather or not. </p>\n<p>The function <em>parseWeather</em> can be simplified a bit</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> parseWeather <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>weather<span class=\"token punctuation\">:</span> string<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> Weather <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>weather <span class=\"token operator\">||</span> <span class=\"token operator\">!</span><span class=\"token function\">isString</span><span class=\"token punctuation\">(</span>weather<span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> <span class=\"token operator\">!</span><span class=\"token function\">isWeather</span><span class=\"token punctuation\">(</span>weather<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Incorrect or missing weather: '</span> <span class=\"token operator\">+</span> weather<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span> \n  <span class=\"token keyword\">return</span> weather<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>With these changes, one issue arises, our data does not conform anymore to our types:</p>\n<picture><img src=\"/static/2d23be7abdebf83abf928340dce1d30c/14be6/30.png\" srcset=\"/static/2d23be7abdebf83abf928340dce1d30c/4cce7/30.png 200w,\n/static/2d23be7abdebf83abf928340dce1d30c/bae5f/30.png 400w,\n/static/2d23be7abdebf83abf928340dce1d30c/14be6/30.png 800w,\n/static/2d23be7abdebf83abf928340dce1d30c/1b35a/30.png 1200w,\n/static/2d23be7abdebf83abf928340dce1d30c/34685/30.png 1480w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>This is because a string can't be just assumed to be an enum. </p>\n<p>The fix is to map the initial data elements to <em>DiaryEntry</em> type with the <em>toNewDiaryEntry</em> function:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> DiaryEntry <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"../src/types\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> toNewDiaryEntry <span class=\"token keyword\">from</span> <span class=\"token string\">\"../src/utils\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> data <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n  <span class=\"token punctuation\">{</span>\n      <span class=\"token string\">\"id\"</span><span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n      <span class=\"token string\">\"date\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"2017-01-01\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token string\">\"weather\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"rainy\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token string\">\"visibility\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"poor\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token string\">\"comment\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"Pretty scary flight, I'm glad I'm alive\"</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">]</span>\n\n<span class=\"token keyword\">const</span> diaryEntries<span class=\"token punctuation\">:</span> DiaryEntry <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> data<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span>obj <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> object <span class=\"token operator\">=</span> <span class=\"token function\">toNewDiaryEntry</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> DiaryEntry\n  object<span class=\"token punctuation\">.</span>id <span class=\"token operator\">=</span> obj<span class=\"token punctuation\">.</span>id\n  <span class=\"token keyword\">return</span> object\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> diaryEntries</code></pre></div>\n<p>Note that since <em>toNewDiaryEntry</em> returns object of the type <em>NewDiaryEntry</em> we need to assert it to be <em>DiaryEntry</em> with <a href=\"http://www.typescriptlang.org/docs/handbook/basic-types.html#type-assertions\">as</a> opeator.</p>\n<p>Enums are usually used when there is a set of predetermined values that are not expected to change in the future. Usually enums are used in much tighter unchanging values (for example weekdays, months, directions) but since they offer us a great way to validate our incoming values we might as well use them in our case. </p>\n<p>After giving <em>Visibility</em> the same treatment our app is finally ready!</p>\n</div>\n<div class=\"tasks\">\n<h3>Exercises 9.14.-9.15.</h3>\n<h4>9.14: Diagnoses backend, step5</h4>\n<p>Create a POST-endpoint <em>/api/patients</em> for adding patients. Ensure that you can add patients also from the frontend.</p>\n<h4>9.15: Diagnoses backend, step6</h4>\n<p>Set up safe parsing, validation and type guards to the POST <em>/api/patients</em>request. </p>\n<p>Refactor the <em>Gender</em> field to use a <em>enum</em> type.</p>\n</div>","frontmatter":{"mainImage":{"publicURL":"/static/part-9-f6057a11c6e419b877b946d5dd8329fd.svg"},"part":9,"letter":"c","lang":"en"}}},"pageContext":{"part":9,"letter":"c","lang":"en"}}