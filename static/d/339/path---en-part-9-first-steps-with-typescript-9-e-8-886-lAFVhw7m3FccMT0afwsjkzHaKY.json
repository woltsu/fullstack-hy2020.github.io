{"data":{"markdownRemark":{"html":"<div class=\"content\">\n<h3>Setting things up</h3>\n<p>First things first: Install TypeScript support to your IDE of choice. For <a href=\"https://code.visualstudio.com/\">Visual Studio Code</a>  you need the <a href=\"https://marketplace.visualstudio.com/items?itemName=rbbit.typescript-hero\">typescript hero</a> extension.</p>\n<p>As mentioned before, TypeScript code is not runnable by itself, but it first needs to be compiled into runnable JavaScript code. When TypeScript is compiled into JavaScript, the code becomes subject for type erasure. This means that type annotations, interfaces, type aliases, and other type system constructs are removed from the code and the result is pure ready-to-run JavaScript.</p>\n<p>In a production environment this need for compilation often means that you need to setup a \"build step\", where all TypeScript code is compiled into JavaScript in a separate folder, and the production enviroment then runs the code from that folder. In a development environment it is often more handy to take use of real-time compilation and auto-reloading, in order to be able to see the resulting changes faster.</p>\n<p>Let's start writing our first TypeScript-app. To keep things simple, let's start by using the npm package <a href=\"https://github.com/TypeStrong/ts-node\">ts-node</a>, that compiles and executes the desired TypeScript file immediately, so that there is no need for the separate compilation step.</p>\n<p>To use <em>ts-node</em> you need to install it globally with the official <em>typescript</em> package by running <em>npm install -g ts-node typescript</em> . </p>\n<p>If you can't or don't want to install global packages you can also create an npm project that has the required dependencies and run your scripts in it. You can do this by running :`npm init_ to create an empty project and then run:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">npm install ts-node typescript</code></pre></div>\n<p>And set up <em>scripts</em> within the package.json file to include: </p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  // ..\n  <span class=\"token property\">\"scripts\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token property\">\"ts-node\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"ts-node\"</span></span>  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  // ..\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>and now within this package you can use <em>ts-node</em> by running <em>npm run ts-node</em>. Notice that if you are using ts-node through package.json, all possible command line arguments for the script need to be prefixed with <em>--</em>. So if you want to run file.ts with <em>ts-node</em>, the whole command is:</p>\n<div class=\"gatsby-highlight\" data-language=\"sh\"><pre class=\"language-sh\"><code class=\"language-sh\">npm run ts-node -- file.ts</code></pre></div>\n<p>It is worth mentioning, that TypeScript also provides an online playground, where you can quickly try out TypeScript code and also instantly see the resulting JavaScript code next to the TypeScript code, and also possible compilation errors. You can access TypeScript's official playground <a href=\"https://www.typescriptlang.org/play/index.html\">here</a>.</p>\n<p><strong>Notice:</strong> The playground might contain different tsconfig rules (which will be introduced later) than your local environment, which is why you might see different warnings there, compared to your local environment. The playgrounds tsconfig is modifiable through the config dropdown menu.</p>\n<blockquote>\n<p><strong>Sidenote:</strong> JavaScript in itself is a fairly loose language and things often can be done in multiple different ways, for example named vs anonymous functions, using const and let or var and the use of <em>semicolons</em>. In this part of the course by default semicolons will be used. It is not a TypeScript specific pattern but a general coding style decision when creating any kind of JavaScript. Whether to use them or not is usually in the hands of the programmer but since it is expected to adapt ones coding habits to the existing codebase, <strong>in the exercises of this part it is expected to use semicolons and to adjust to the coding style of the part</strong>.</p>\n</blockquote>\n<p>Now, let's start by creating a simple Multiplier, exactly as you would in JavaScript.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">multiplicator</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">,</span> printText<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>printText<span class=\"token punctuation\">,</span>  a <span class=\"token operator\">*</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">multiplicator</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Multiplied numbers 1 and four, the result is:'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>As we can see, this is still ordinary basic JavaScript with no additional TS features and it compiles and runs nicely with <em>ts-node multiplier.ts</em> (or if using an npm package <em>npm run ts-node -- multiplier.ts`), as it would with Node. But what happens if we end up passing wrong _types</em> of arguments to the multiplicator function?</p>\n<p>Let's try it out!</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">multiplicator</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">,</span> printText<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>printText<span class=\"token punctuation\">,</span>  a <span class=\"token operator\">*</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">multiplicator</span><span class=\"token punctuation\">(</span><span class=\"token string\">'can we multiply by a string?'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Multiplied a string and four, the result is:'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Now when running the code, both examples still produce the same output, which is now:\n`Multiplied a string and four, the result is: NaN_. Wouldn't it be nice if there was a way that the language itself could prevent us from ending up in situations like this?</p>\n<p>This is where we get the first benefits of TypeScript into use. Let's add types to the parameters and see where it takes us.</p>\n<p>TypeScript natively supports multiple types including <em>number</em>, <em>string</em>, <em>Array</em>, <em>null</em>, <em>any</em>, <em>enum</em>, see the comprehensive list <a href=\"https://www.typescriptlang.org/docs/handbook/basic-types.html\">here</a>.</p>\n<p>More complex custom types can also be created and almost always, except maybe when your application is really tiny or a simple proof-of-concept, they are needed.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">multiplicator</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">:</span> number<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">:</span> number<span class=\"token punctuation\">,</span> printText<span class=\"token punctuation\">:</span> string<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>printText<span class=\"token punctuation\">,</span>  a <span class=\"token operator\">*</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">multiplicator</span><span class=\"token punctuation\">(</span><span class=\"token string\">'can we multiply by a string?'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span>i <span class=\"token string\">'Multplied a string and four, the result is:'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Now the code is no longer valid JavaScript, but in fact TypeScript. Try running the code once again, and see what happens.</p>\n<p>An error is immediately seen and the obviously faulty code can also be found straight away.</p>\n<p>One of the best things in TypeScript's IDE support is that you don't necessarily need to even run the code to see the issues recognized by TypeScript. The VSCode plugin is so efficient, that it informs you immediately when you are trying to use an incorrect type, where another type is expected. There should be red underlining under the faulty input and when you hover your cursor on top of that, you should see the following error message:</p>\n<picture><img src=\"/static/7a73285e6588983383eb619b671d99f5/14be6/2.png\" srcset=\"/static/7a73285e6588983383eb619b671d99f5/4cce7/2.png 200w,\n/static/7a73285e6588983383eb619b671d99f5/bae5f/2.png 400w,\n/static/7a73285e6588983383eb619b671d99f5/14be6/2.png 800w,\n/static/7a73285e6588983383eb619b671d99f5/f6949/2.png 982w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n</div>\n<div class=\"tasks\">\n<h3>Exercises</h3>\n<p><strong>Before you start doing the exercises</strong> create a file called tsconfig.json to the folder you will do the exercises in with the following content:</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"compilerOptions\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"noImplicitAny\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>tsconfig.json can include various information for the TypeScript compiler on how to inpertret the code, how strictly should the compilator work and on what files to watch or ignore, and <a href=\"https://www.typescriptlang.org/docs/handbook/tsconfig-json.html\">much more</a>. Right now let's only use the compiler option \"noImplicitAny\", which makes it mandatory to have types for all variables used.</p>\n<h4>9.1</h4>\n<p>Write your first TypeScript file that counts <a href=\"https://en.wikipedia.org/wiki/Body_mass_index\">BMI</a> based on given weight and height and then prints out a message that suits the results. The arguments can be hard-coded and command line arguments shouldn't be used in this exercise.</p>\n<p>The file should work by running <em>ts-node bmiCalculator.ts</em>, the calculation function and its accepted arguments should all be typed and necessary error cases should be handled appropriately.</p>\n<p>Example run: </p>\n<div class=\"gatsby-highlight\" data-language=\"sh\"><pre class=\"language-sh\"><code class=\"language-sh\">$ ts-node 01.01bmiCalculator.ts\n\nSlightly too much weight</code></pre></div>\n</div>\n<div class=\"content\">\n<h3>Creating your first own Types</h3>\n<p>Let's expand our multiplicator and create a little bit more useful calculator, that also supports addition and division. The calculator should accept three arguments: Two numbers and then the operation, which tells the calculator what to do with those numbers; either 'multiply', 'add' or 'divide'.</p>\n<p>With basic JavaScript, this type of code, where trusting a string to be specific form, would require additional validation, but TypeScript offers us a way to define specific types for the inputs, which describes exactly what type of inputs to accept. On top of that, TypeScript can also show the info of the accepted values already on IDE level.</p>\n<p>To create our <em>type</em> we use the TypeScript native keyword <em>type</em> to describe what we want to accept. Let's describe our type _Operation`:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">type Operation <span class=\"token operator\">=</span> <span class=\"token string\">'multiply'</span> <span class=\"token operator\">|</span> <span class=\"token string\">'add'</span> <span class=\"token operator\">|</span> <span class=\"token string\">'divide'</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Now the <em>Operation</em> type accepts only three kinds of input; exactly the three wanted strings. With the OR operator <em>|</em> we can define a variable to accept multiple values by creating a <a href=\"https://www.typescriptlang.org/docs/handbook/advanced-types.html#union-types\">union type</a>. In this case we used exact strings but with unions you could also inform the compiler to accept for example both string and number <em>string | number</em>.</p>\n<p>In techincal terms the keyword <em>type</em> creates <a href=\"https://www.typescriptlang.org/docs/handbook/advanced-types.html#type-aliases\">a type alias</a>, that is a new name for a type. Since the defined type is a union of three possible values, it is handy to give it an alias that has a representative name.</p>\n<p>Let's look at our calculator now:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">type Operation <span class=\"token operator\">=</span> <span class=\"token string\">'multiply'</span> <span class=\"token operator\">|</span> <span class=\"token string\">'add'</span> <span class=\"token operator\">|</span> <span class=\"token string\">'divide'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">calculator</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">:</span> number<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">:</span> number<span class=\"token punctuation\">,</span> operation <span class=\"token punctuation\">:</span> Operation<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>operation <span class=\"token operator\">===</span> <span class=\"token string\">'multiply'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> a <span class=\"token operator\">*</span> b<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>operation <span class=\"token operator\">===</span> <span class=\"token string\">'add'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> a <span class=\"token operator\">+</span> b<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>operation <span class=\"token operator\">===</span> <span class=\"token string\">'divide'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>b <span class=\"token operator\">===</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token string\">'can\\'t divide by 0!'</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> a <span class=\"token operator\">/</span> b<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Now when we hover on top of the <em>Operation</em> type in the calculator function, we can immediately see suggestions on what to do with it:</p>\n<picture><img src=\"/static/c9e244a81232619f2c53c09b6d4c69df/14be6/3.png\" srcset=\"/static/c9e244a81232619f2c53c09b6d4c69df/4cce7/3.png 200w,\n/static/c9e244a81232619f2c53c09b6d4c69df/bae5f/3.png 400w,\n/static/c9e244a81232619f2c53c09b6d4c69df/14be6/3.png 800w,\n/static/c9e244a81232619f2c53c09b6d4c69df/1b35a/3.png 1200w,\n/static/c9e244a81232619f2c53c09b6d4c69df/87e0a/3.png 1264w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>And if we try to use a value, that is not within the <em>Operation</em> type, we get the familiar red warning signal and extra info from our IDE:</p>\n<picture><img src=\"/static/92c3e7f765c4359361de07e3183cab46/14be6/4.png\" srcset=\"/static/92c3e7f765c4359361de07e3183cab46/4cce7/4.png 200w,\n/static/92c3e7f765c4359361de07e3183cab46/bae5f/4.png 400w,\n/static/92c3e7f765c4359361de07e3183cab46/14be6/4.png 800w,\n/static/92c3e7f765c4359361de07e3183cab46/302cf/4.png 857w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>This is already pretty nice, but one thing we haven't touched yet, is typing the return value of a function. Usually you want to know what a function returns and it would be nice to have some guarantee on it. Let's add a return value <em>number</em> for the calculator function:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">type Operation <span class=\"token operator\">=</span> <span class=\"token string\">'multiply'</span> <span class=\"token operator\">|</span> <span class=\"token string\">'add'</span> <span class=\"token operator\">|</span> <span class=\"token string\">'divide'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> calculator <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">:</span> number<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">:</span> number<span class=\"token punctuation\">,</span> operation<span class=\"token punctuation\">:</span> Operation<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> number <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>operation <span class=\"token operator\">===</span> <span class=\"token string\">'multiply'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> a <span class=\"token operator\">*</span> b<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>operation <span class=\"token operator\">===</span> <span class=\"token string\">'add'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> a <span class=\"token operator\">+</span> b<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>operation <span class=\"token operator\">===</span> <span class=\"token string\">'divide'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>b <span class=\"token operator\">===</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token string\">'this cannot be done'</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> a <span class=\"token operator\">/</span> b<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>We can straight away see that this produces an error, because now the function is not returning a number, but in some cases it returns a string. We can fix it in a couple of ways: We could extend the return type to allow also string values, like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> calculator <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">:</span> number<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">:</span> number<span class=\"token punctuation\">,</span> operation<span class=\"token punctuation\">:</span> Operation<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">:</span> number <span class=\"token operator\">|</span> string <span class=\"token operator\">=></span>  <span class=\"token punctuation\">{</span>\n  <span class=\"token operator\">...</span></code></pre></div>\n<p>We could also create a return type that includes the both possible values, much like the type Operation.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">type Result <span class=\"token operator\">=</span> string <span class=\"token operator\">|</span> number</code></pre></div>\n<p>But now is time for the big question:</p>\n<p>Is it <i>really</i> okay for the function to return a string?</p>\n<p>When you have written code that can actually end up in a situation where something is divided by 0 it probably means something has gone terribly wrong and in that case an error should probably be thrown and handled somewhere where the function was called. When you are deciding to return values you weren't originally planning, the warnings you see from TypeScript restrict you from making rushed decisions and help you to keep your code working as expected.</p>\n<p>One more thing to consider is that even though we have in our code defined what types of parameters to accept, the generated JavaScript that is used runtime doesn't anymore have these type checks. So, if for example the <em>operation`-parameter's value comes from an external interface, there is no definite guarantee that it will be one of the allowed values. Therefore it's still better to include error handling to be prepared for the unexpected to happen. In this case, when there are multiple possible accepted values and all unexcpeted ones should result in an error, the [switch...case](w3schools.com/js/js</em>switch.asp) statement suits better than if...else in our code. The resulting code of our calculator could actually look something like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">type Operation <span class=\"token operator\">=</span> <span class=\"token string\">'multiply'</span> <span class=\"token operator\">|</span> <span class=\"token string\">'add'</span> <span class=\"token operator\">|</span> <span class=\"token string\">'divide'</span><span class=\"token punctuation\">;</span>\n\ntype Result <span class=\"token operator\">=</span> number<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> calculator <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">:</span> number<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">:</span> number<span class=\"token punctuation\">,</span> operation <span class=\"token punctuation\">:</span> Operation<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">:</span> Result <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">switch</span><span class=\"token punctuation\">(</span>operation<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">case</span> <span class=\"token string\">'multiply'</span><span class=\"token punctuation\">:</span>\n      <span class=\"token keyword\">return</span> a <span class=\"token operator\">*</span> b<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">case</span> <span class=\"token string\">'divide'</span><span class=\"token punctuation\">:</span>\n      <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span> b <span class=\"token operator\">===</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'can\\'t divide by 0!'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">return</span> a <span class=\"token operator\">/</span> b<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">case</span> <span class=\"token string\">'add'</span><span class=\"token punctuation\">:</span>\n      <span class=\"token keyword\">return</span> a <span class=\"token operator\">+</span> b<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">default</span><span class=\"token punctuation\">:</span>\n      <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Operation is not multiply, add or divide!'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">calculator</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span> <span class=\"token punctuation\">,</span> <span class=\"token string\">'divide'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">e</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Something went terribly wrong, error message: '</span><span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">.</span>message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</div>\n<div class=\"tasks\">\n<h3>Exercises</h3>\n<h4>9.2</h4>\n<p>Write a function that calculates the averige time of input <em>daily exercise hours</em> and compares the to the value to the <em>target amount</em> of daily hours and returns an object that includes the following values:</p>\n<ul>\n<li>the number of days</li>\n<li>the number of traing days</li>\n<li>boolean value on whether the hours have succeeded to reach the target</li>\n<li>a rating between the numbers 1-3 that tells how well the hours are met. You can decide on the metric on your own.</li>\n<li>a text value explaining the rating,</li>\n<li>the original target value</li>\n<li>the calculated average time</li>\n</ul>\n<p>The daily exercise hours are given to the function as an <a href=\"https://www.typescriptlang.org/docs/handbook/basic-types.html#array\">array</a> that contains the number of exercise hours for each day in the training period. Eg. a week with 1 hours of training at Monday, none at Tuesday 2 hours at Wednesday and so on would be represented buy the following array:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2.5</span><span class=\"token punctuation\">]</span></code></pre></div>\n<p>For the Result object you should to create an <a href=\"https://www.typescriptlang.org/docs/handbook/interfaces.html\">interface</a> instead of a type since</p>\n<p>The program is working if:</p>\n<ul>\n<li>program can be run by inputting <em>ts-node exerciseCalculator.ts</em>,</li>\n<li>The results are calculated correctly</li>\n<li>Errors are handled appropriately</li>\n<li>Everything is typed as tsconfig requires</li>\n</ul>\n<p>If you eg. would call the function with parameters <em>[1, 0, 2, 4.5, 0, 3, 1, 0, 4]</em> and <em>2</em> it could return</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">{</span> periodLength<span class=\"token punctuation\">:</span> <span class=\"token number\">9</span><span class=\"token punctuation\">,</span>\n  trainingDays<span class=\"token punctuation\">:</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span>\n  success<span class=\"token punctuation\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n  rating<span class=\"token punctuation\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span>\n  ratingDescription<span class=\"token punctuation\">:</span> <span class=\"token string\">'not too bad but could be better'</span><span class=\"token punctuation\">,</span>\n  target<span class=\"token punctuation\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span>\n  average<span class=\"token punctuation\">:</span> <span class=\"token number\">1.7222222222222223</span> <span class=\"token punctuation\">}</span></code></pre></div>\n</div>\n<div class=\"content\">\n<p>The programs we've written are alright, but it sure would be nice if there was a way to use command line arguments instead of always having to change the actual code. Let's try it out, as we would in a regular Node application, by accessing <em>process.argv</em>. But woah, hey, somethings wrong!</p>\n<picture><img src=\"/static/07d7898a48d092c789aa57608097678f/14be6/5.png\" srcset=\"/static/07d7898a48d092c789aa57608097678f/4cce7/5.png 200w,\n/static/07d7898a48d092c789aa57608097678f/bae5f/5.png 400w,\n/static/07d7898a48d092c789aa57608097678f/14be6/5.png 800w,\n/static/07d7898a48d092c789aa57608097678f/d9c69/5.png 829w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<h3>@types/{npm_package}</h3>\n<p>Let's return to the basic idea of TypeScript. TypeScript expects all globally used code to be typed, as it does for your own code with reasonable tsconfig-rules. The TypeScript library itself contains only typings for the code the TypeScript package contains. It is possible to write your own typings for a library, but that is almost never needed - that's where the TypeScript <em>community</em> comes to help.</p>\n<p>As in the world of npm, TypeScript also celebrates open source code and the community around it is active and continuously reacting to updates and changes in commonly used npm-packages. That is why the typings for npm-packages are almost always to be found, so that you won't be alone creating types for all of your thousands of dependencies.</p>\n<p>Generally, (since the release of TypeScript 2.0) types for existing packages can be found by under the <em>@types</em>-organization within npm, so that you can add the relevant types to your project by installing an npm package with the name of your package with a @types/ - prefix, for example: <em>npm install --save-dev @types/react</em>, @types/express, @types/lodash, @types/jest, @types/mongoose and the list goes on and on. The <em>@types/*</em> are maintained by <a href=\"http://definitelytyped.org/\">Definitely typed</a>, a community project with the goal to mainting types of everything in one place.</p>\n<p>If you happen to run into a package that doesn't yet have their own typings it is fairly simple to add your own, but more on to that later this week.</p>\n<p>Sometimes a npm package can also include its types within the code and of course in that case downloading of the corresponding <em>@types/*</em> is not necessary.</p>\n<blockquote>\n<p><strong>Notice:</strong> Since the typings are only used before compilation, the typings are not needed in the production build and they should <strong>always</strong> be in the the devDependencies of the package.json.</p>\n</blockquote>\n<hr>\n<p>Since using Node's own global variable <em>process</em> requires installing the dependency of <em>@types/node</em>, including command line arguments in the code, run the code requires a little more effort and setting up a package.json. Seems like a lot of work to get such a simple thing to work but let's be clear: TypeScript is not a scripting language. TypeScripts benefits rise in bigger projects and when complexity increases it helps you keep track of what is happening all around your system. Refactoring can also be done with greater ease, since the compiler alarms about any wrong type usage, and thus it is easier to keep your code clean.</p>\n<h3>A proper TypeScript project</h3>\n<p>Since writing scripts is not the best use of TypeScript, let's stop doing that right away and start our first real project by running:</p>\n<div class=\"gatsby-highlight\" data-language=\"sh\"><pre class=\"language-sh\"><code class=\"language-sh\">npm init</code></pre></div>\n<p>Once the setup is done we also need to install <em>ts-node</em> and <em>TypeScript</em> as dependencies to the project.</p>\n<div class=\"gatsby-highlight\" data-language=\"sh\"><pre class=\"language-sh\"><code class=\"language-sh\">npm install --save-dev ts-node typescript</code></pre></div>\n<blockquote>\n<p><strong>Notice:</strong> If you installed <em>ts-node</em> and _TypeScript`globally, the scripts are still runnable even if you don't add the two dependencies to your project. But you should <strong>always add all of the required dependencies to your package.json</strong> for reusability and shareability. Incomplete dependencies equals bad code.</p>\n</blockquote>\n<p>Now let's move the two scripts <em>multiplicator</em> and <em>calculator</em> and <em>tsconfig.json</em> to the project folder and add scripts by which we can run them.</p>\n<p>Now the <em>package.json</em> looks like this: </p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"part1\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"version\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"1.0.0\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"description\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"main\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"index.js\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"scripts\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"multiply\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"ts-node multiplier.ts\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"calculate\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"ts-node calculator.ts\"</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"author\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"license\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"ISC\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"devDependencies\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"ts-node\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"^8.6.2\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"typescript\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"^3.8.2\"</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Now we can run our scripts through:</p>\n<div class=\"gatsby-highlight\" data-language=\"sh\"><pre class=\"language-sh\"><code class=\"language-sh\">npm run multiply</code></pre></div>\n<p>And</p>\n<div class=\"gatsby-highlight\" data-language=\"sh\"><pre class=\"language-sh\"><code class=\"language-sh\">npm run calculate</code></pre></div>\n<p>Seems to be working, great!</p>\n<p>Now for the command line arguments, let's install our first <em>@types/</em> package.</p>\n<div class=\"gatsby-highlight\" data-language=\"sh\"><pre class=\"language-sh\"><code class=\"language-sh\">npm install --save-dev @types/node</code></pre></div>\n<p>And now we finally can start using the global <em>process</em> variable! Command line arguments are accessed as in Node through <em>process.argv</em> array where given arguments start from index 2, as 0 and 1 are taken by the whole command-line invocation.</p>\n<p>When adding command line arguments and error checking to the multiplicator file, we should end up with a file looking something like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">MultiplyValues</span> <span class=\"token punctuation\">{</span>\n  value1<span class=\"token punctuation\">:</span> number<span class=\"token punctuation\">;</span>\n  value2<span class=\"token punctuation\">:</span> number<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> parseArguments <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">:</span> Array<span class=\"token operator\">&lt;</span>string<span class=\"token operator\">></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> MultiplyValues <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">.</span>length <span class=\"token operator\">&lt;</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Not enough arguments'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">.</span>length <span class=\"token operator\">></span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Too many arguments'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">isNaN</span><span class=\"token punctuation\">(</span><span class=\"token function\">Number</span><span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span><span class=\"token function\">isNaN</span><span class=\"token punctuation\">(</span><span class=\"token function\">Number</span><span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> value1 <span class=\"token operator\">=</span> <span class=\"token function\">Number</span><span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> value2 <span class=\"token operator\">=</span> <span class=\"token function\">Number</span><span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n      value1<span class=\"token punctuation\">,</span>\n      value2<span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Provided values were not numbers!'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">multiplicator</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">:</span> number<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">:</span> number<span class=\"token punctuation\">,</span> printText<span class=\"token punctuation\">:</span> string<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>printText<span class=\"token punctuation\">,</span>  a <span class=\"token operator\">*</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> value1<span class=\"token punctuation\">,</span> value2 <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">parseArguments</span><span class=\"token punctuation\">(</span>process<span class=\"token punctuation\">.</span>argv<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">multiplicator</span><span class=\"token punctuation\">(</span>value1<span class=\"token punctuation\">,</span> value2<span class=\"token punctuation\">,</span> _Multplied $<span class=\"token punctuation\">{</span>value1<span class=\"token punctuation\">}</span> and $<span class=\"token punctuation\">{</span>value2<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> the result is<span class=\"token punctuation\">:</span>`<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">e</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Error, something bad happened, messafe: '</span><span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">.</span>message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</div>\n<div class=\"tasks\">\n<h3>Exercises</h3>\n<h4>9.3</h4>\n<p>Create a npm project that includes both 1.1 and 1.2 scripts that can be run with command line arguments. Include also the tsconfig.json file and make sure the scripts run. Handle exeptions and errors appropriately. exerciseCalculator should accept inputs of varied length. Determine by yourself how you manage to collect all needed input.</p>\n<p>Your program could work eg. as follows:</p>\n<div class=\"gatsby-highlight\" data-language=\"sh\"><pre class=\"language-sh\"><code class=\"language-sh\">$ npm run bmi 75 180\n\nnormal weight</code></pre></div>\n<p>and</p>\n<div class=\"gatsby-highlight\" data-language=\"sh\"><pre class=\"language-sh\"><code class=\"language-sh\">$ npm run exercises 1 0 2 4.5 0 3 1 0 4 2\n\n{ periodLength: 9,\n  trainingDays: 6,\n  success: false,\n  rating: 2,\n  ratingDescription: &#39;not too bad but could be better&#39;,\n  target: 2,\n  average: 1.7222222222222223 }</code></pre></div>\n<p>In the example the last argument is the target value.</p>\n</div>\n<div class=\"content\">\n<h3>More about tsconfig</h3>\n<p>For now we have been only using one tsconfig rule \"noImplicitAny\" which is a good place to start but now it is time to start looking into the file a little bit deeper.</p>\n<p><a href=\"https://www.typescriptlang.org/docs/handbook/tsconfig-json.html\">tsconfig.json</a> includes all your core configurations on how you want your TypeScript to work. In tsconfig.json you can define how strictly you want the code to be inspected, what files to include, what files to exclude (node_modules is excluded by default), and where compiled files should be placed (more on this later). Tsconfig-files also support inheritance to handle separate configuration within a project in a different manner.</p>\n<p>Right now let's grow our <em>tsconfig.json</em> to the following form:</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"compilerOptions\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"target\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"ES2020\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"strict\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"noUnusedLocals\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"noUnusedParameters\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>       \n    <span class=\"token property\">\"noImplicitReturns\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"noFallthroughCasesInSwitch\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"esModuleInterop\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Don't take too much time to worry about the compilerOptions selected here, they will be under closer inspection on part 2.</p>\n<p>The explanations for each of the field can be found from TypeScripts documentation or the really handy although beta-stagen <a href=\"https://www.typescriptlang.org/v2/en/tsconfig\">tsconfig page</a> or in a little worse format but very thoroughly from tsconfig's <a href=\"http://json.schemastore.org/tsconfig\">schema definition</a>.</p>\n</div>\n<div class=\"tasks\">\n<h3>Exercises</h3>\n<h4>9.4</h4>\n<p>Replace your existing <em>tsconfig.json</em> file with the  following content:</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"compilerOptions\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"noImplicitAny\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"noImplicitReturns\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"strictNullChecks\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"strictPropertyInitialization\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"strictBindCallApply\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"noImplicitThis\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"alwaysStrict\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"esModuleInterop\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"declaration\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"exclude\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token string\">\"node_modules\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Then make sure you are able to run both scripts and fix every place of error.</p>\n</div>\n<div class=\"content\">\n<h3>Adding express to the mix</h3>\n<p>Right now we are at a pretty good place, our project is set up and we have two runnable calculators there. But since we are studying fullstack development and not only doing funny little scripts, it might be time to put the scripts to respond to a HTTP-request, so let's set up Express.</p>\n<p>First, let's run</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">npm install express</code></pre></div>\n<p>create file <em>index.ts</em>,</p>\n<p>set up the <em>start</em> command to in package.json to be:</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token property\">\"start\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"ts-node index.ts\"</span><span class=\"token punctuation\">,</span></code></pre></div>\n<p>and write the smallest possible ping endoint.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> express <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'express'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> app <span class=\"token operator\">=</span> <span class=\"token function\">express</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\napp<span class=\"token punctuation\">.</span><span class=\"token keyword\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/ping'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  res<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token string\">'pong'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token constant\">PORT</span> <span class=\"token operator\">=</span> <span class=\"token number\">3003</span><span class=\"token punctuation\">;</span>\n\napp<span class=\"token punctuation\">.</span><span class=\"token function\">listen</span><span class=\"token punctuation\">(</span><span class=\"token constant\">PORT</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token string\">`Server running on port </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token constant\">PORT</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>And woah, something is wrong once again.</p>\n<p>Everything else seems to be going nice but as you'd expect, the express-modules offered get method's <em>req</em> and <em>res</em> variables need typing. If we look really carefully VS Code is also complaining us about something in regards of the express importing, that is indicated by the short yellow line of dots under the <em>require</em> Let's hover over the <em>require</em> problem:</p>\n<picture><img src=\"/static/6aaed1ead88e0c5c5cf0bb2be6ab794e/a8801/6.png\" srcset=\"/static/6aaed1ead88e0c5c5cf0bb2be6ab794e/7900a/6.png 200w,\n/static/6aaed1ead88e0c5c5cf0bb2be6ab794e/843cd/6.png 400w,\n/static/6aaed1ead88e0c5c5cf0bb2be6ab794e/a8801/6.png 663w\" sizes=\"(max-width: 663px) 100vw, 663px\"></picture>\n<p>The complaint is 'Require may be converted to a import'. Let's try it out and rewrite the <em>require</em> clause to <em>import</em>.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> express <span class=\"token keyword\">from</span> <span class=\"token string\">'express'</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><strong>Hint:</strong> by clicking the <em>Quick fix...</em> button VSCode offers you a possibility to fix the issue automatically. Keep your eyes open all the time for these helpers/quick fixes the IDE offers you; listening to your editor usually only makes your code better and easier to read and automatic fixes for issues can be a major time saver.</p>\n<p>Now we run into the another problem, complain in the newly created import. Once again the editor is our biggest friend when trying to find out what the issue is about:</p>\n<picture><img src=\"/static/42c8ddc465ac50724204530330e17888/14be6/7.png\" srcset=\"/static/42c8ddc465ac50724204530330e17888/4cce7/7.png 200w,\n/static/42c8ddc465ac50724204530330e17888/bae5f/7.png 400w,\n/static/42c8ddc465ac50724204530330e17888/14be6/7.png 800w,\n/static/42c8ddc465ac50724204530330e17888/75733/7.png 913w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>We still haven't installed the types for <i>express</i>. Let's do what the suggestion says and run:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">npm install --save-dev @types/express</code></pre></div>\n<p>And now no errors are found anymore! Let's take an even deeper look into what changed here.</p>\n<p>With the <em>require</em> clause, when hovering on the imported module <em>express</em>, we can see that the compiler interprets it to the type <em>any</em>.</p>\n<picture><img src=\"/static/64f76e50f907e023df19e5eeaead8b55/b22b3/8.png\" srcset=\"/static/64f76e50f907e023df19e5eeaead8b55/13d43/8.png 200w,\n/static/64f76e50f907e023df19e5eeaead8b55/6b4d7/8.png 400w,\n/static/64f76e50f907e023df19e5eeaead8b55/b22b3/8.png 470w\" sizes=\"(max-width: 470px) 100vw, 470px\"></picture>\n<p>Whereas when the <em>import</em> version is used, we can see a whole new level of typings:</p>\n<picture><img src=\"/static/a61fbe0ca4c003ba5cef69fd3226ee3e/b8063/9.png\" srcset=\"/static/a61fbe0ca4c003ba5cef69fd3226ee3e/e8c26/9.png 200w,\n/static/a61fbe0ca4c003ba5cef69fd3226ee3e/e0783/9.png 400w,\n/static/a61fbe0ca4c003ba5cef69fd3226ee3e/b8063/9.png 660w\" sizes=\"(max-width: 660px) 100vw, 660px\"></picture>\n<p>And even the parameters <em>req</em> and <em>res</em> seem to be typed for use:</p>\n<picture><img src=\"/static/72851d14087ef6ffdd831b58743494ee/3eeec/10.png\" srcset=\"/static/72851d14087ef6ffdd831b58743494ee/2d907/10.png 200w,\n/static/72851d14087ef6ffdd831b58743494ee/f37d7/10.png 400w,\n/static/72851d14087ef6ffdd831b58743494ee/3eeec/10.png 643w\" sizes=\"(max-width: 643px) 100vw, 643px\"></picture>\n<p>This happens because when using the <em>import</em> clause the whole // ELABORATE THIS</p>\n<p>What kind of import statement you should use, depends on the type of which <em>exporting method</em> is used in the imported package.</p>\n<p>A good rule of thumb is to primarily start by trying to import a module with the <em>import ... from ...</em> clause, that is the one we are always using in <i>frontend</i>. If it causes an error, try a combination of the both: <em>import ... = require('...')</em>.</p>\n<p>We strongly suggest to read more on TypeScript modules <a href=\"https://www.typescriptlang.org/docs/handbook/modules.html\">here</a>.</p>\n<p>Now let's run the express application with Curl and check if it works:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">curl localhost:3000/ping</code></pre></div>\n<picture><img src=\"/static/b4bb0068f8b560e2480b351da6a4ccd9/74196/11.png\" srcset=\"/static/b4bb0068f8b560e2480b351da6a4ccd9/f4937/11.png 200w,\n/static/b4bb0068f8b560e2480b351da6a4ccd9/74196/11.png 260w\" sizes=\"(max-width: 260px) 100vw, 260px\"></picture>\n<p>Awesome!</p>\n<p>Now to simplify the development we should enable <em>auto reloading</em> to improve our workflow. In this course you have already used <em>nodemon</em>, but ts-node has an alternative called <em>ts-node-dev</em> which is meant only for development environment that takes care of recompilation on every change so restarting the application won't be necessary.</p>\n<p>Let's install <em>ts-node-dev</em> to our dev-dependencies and add a script to <em>package.json</em> which can be run with <em>npm run dev</em> with which the <em>development version</em> of the project is run.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">npm install --save-dev  ts-node-dev</code></pre></div>\n<p>The scripts:</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  // ...\n  <span class=\"token property\">\"scripts\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token property\">\"start\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"ts-node index.ts\"</span><span class=\"token punctuation\">,</span>\n<span class=\"gatsby-highlight-code-line\">      <span class=\"token property\">\"dev\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"ts-node-dev index.ts\"</span><span class=\"token punctuation\">,</span></span>      //  ...\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  // ...\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>And now by running <em>npm run dev</em> we have a working auto-reloading development environment for our project!</p>\n</div>\n<div class=\"tasks\">\n<h3>Exercises</h3>\n<h4>9.5</h4>\n<p>Use the same npm project base and add express to your dependecies and create an endpoint that answers 'Hello Full Stack!'</p>\n<p>The project should be served on command <em>npm start</em></p>\n<h4>9.6</h4>\n<p>Configure <em>ts-node-dev</em> to your package to help your development workflow.</p>\n<p>Add an enpoint for BMI-calculator that can be used by doing a HTTP GET request to endpoint <em>bmi</em> and specifying the input with <a href=\"https://en.wikipedia.org/wiki/Query_string\">query string parameters</a>. Eg. to get bmi for person having heigth 180 and weigth 72, the url is <a href=\"http://localhost:3002/bmi?heigth=180&#x26;weight=72\">http://localhost:3002/bmi?heigth=180&#x26;weight=72</a></p>\n<p>the response is a json of the form</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">{</span>\n  weight<span class=\"token punctuation\">:</span> <span class=\"token number\">72</span><span class=\"token punctuation\">,</span>\n  heigth<span class=\"token punctuation\">:</span> <span class=\"token number\">180</span><span class=\"token punctuation\">,</span>\n  bmi<span class=\"token punctuation\">:</span> <span class=\"token string\">\"Normal (healthy weight)\"</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>See the <a href=\"http://expressjs.com/en/5x/api.html#req.query\">express documentation</a> for info how to access the query parameters.</p>\n<p>If the query parameters of the request are of the wrong type or missing, response with proper statuscode and error message are given</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">{</span>\n  error<span class=\"token punctuation\">:</span> <span class=\"token string\">\"malformatted parameters\"</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Do not copy the caclucator code to file <em>index.ts</em>, make it a <a href=\"https://www.typescriptlang.org/docs/handbook/modules.html\">typescript module</a> that can be imported in <em>index.ts</em>. You might need to change the BMI calculator of Exercise 1.1. to make it fit to this exercise.</p>\n</div>\n<div class=\"content\">\n<h3>The horrors of <em>any</em></h3>\n<p>Now that we have our first small endpoints done, one thing to notice is that in these minimal examples <em>barely any TypeScript is actually in the code</em>. When looking more closely at the code, we can see a few possibly dangerous things. Let's look at our endpoint <em>calculate</em>, that takes the familiar two integer values and an operation string.</p>\n<p>When we hover on the <em>calculate</em> function, we can see once again help from the IDE:</p>\n<picture><img src=\"/static/d5160c5299a9686adf9ff37efea7ace8/865e5/12.png\" srcset=\"/static/d5160c5299a9686adf9ff37efea7ace8/57f40/12.png 200w,\n/static/d5160c5299a9686adf9ff37efea7ace8/0b659/12.png 400w,\n/static/d5160c5299a9686adf9ff37efea7ace8/865e5/12.png 675w\" sizes=\"(max-width: 675px) 100vw, 675px\"></picture>\n<p>Even though the file itself doesn't contain any typings, we can see the typing of the <em>calculator</em> function, which expects (as it should) the correct types of arguments, and returns a number. Great!</p>\n<p>But when hovering to the parsed values from the request, issues arise:</p>\n<picture><img src=\"/static/b9e66dc312473ec1e3a71dec0605ca0e/e9ad3/13.png\" srcset=\"/static/b9e66dc312473ec1e3a71dec0605ca0e/20bd1/13.png 200w,\n/static/b9e66dc312473ec1e3a71dec0605ca0e/f6d96/13.png 400w,\n/static/b9e66dc312473ec1e3a71dec0605ca0e/e9ad3/13.png 410w\" sizes=\"(max-width: 410px) 100vw, 410px\"></picture>\n<p>All of the values are typed as <em>any</em>. Well, that could be expected since no one has typed our expected values. There are a couple of ways to fix this, but first thing to consider is: Why is this accepted and where did the type <em>any</em> come from?</p>\n<p>In TypeScript every untyped variable, for which the type cannot be inferred, becomes <em>implicitly</em> any because without typings the compiler doesn't know what types to expect and the <em>any</em> type is enforced. The easiest place for this to happen is by forgetting to type functions. <em>Any</em> can also be <em>explicitly</em> put onto a variable as any other type. The only difference between these two is on how the code looks and the compiler is not affected from the difference.</p>\n<p>Implicit and explicit enforcing of the <em>any</em> type onto a variable have a few different effects on how a programmer sees the code. Implicit typings of <em>any</em> is usually considered directly problematic, since it usually is a matter of the coder simply not assigning types and basically not using TypeScript in their code at all. This is why the <em>noImplicitAny</em> exists already on compiler level and it is suggested to keep it on at all times; if there comes a case where you seriously cannot know what the type of a variable will be, you should <em>explicitly</em> state it in the code, <em>const a : any = ...</em>.</p>\n<p>In this situation we already have <em>noImplicitAny</em> defined in our tsconfig. So why is <em>any</em> approved here?</p>\n<p>That is because in this case the <em>query</em> param of the <em>Request</em> type of object within the express project is actually <em>explicitly</em> typed as <em>any</em>. We can enforce (and probably should) enforce typings to know the form of our accepted request, but since the compiler or the IDE doesn't suggest that kind of behaviour, what's the point?</p>\n<p>Fortunately TypeScript and tsConfig are not the only places to enforce coding style and what we should do is to take eslint into use to help us manage our code. Let's install eslint and a typescript extension for it called typescript-eslint and set up a rule to disallow <em>explicit _any</em> typings_.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">npm install --save-dev eslint @typescript-eslint/eslint-plugin @typescript-eslint/parser</code></pre></div>\n<p>Now let's set up our eslint by creating a file .eslintrc to follow the following setting:</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"parser\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"@typescript-eslint/parser\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"parserOptions\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"ecmaVersion\"</span><span class=\"token operator\">:</span> <span class=\"token number\">11</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"sourceType\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"module\"</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"plugins\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"@typescript-eslint\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  \n  <span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"@typescript-eslint/no-explicit-any\"</span><span class=\"token operator\">:</span> <span class=\"token number\">2</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>And let's set up the <em>lint</em> script to inspect the files with <em>.ts</em> extension by adding a script to the <em>package.json</em> file:</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  // ...\n  <span class=\"token property\">\"scripts\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token property\">\"start\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"ts-node index.ts\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"dev\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"ts-node-dev index.ts\"</span><span class=\"token punctuation\">,</span> \n<span class=\"gatsby-highlight-code-line\">      <span class=\"token property\">\"lint\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"eslint --ext *.ts\"</span></span>      //  ...\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  // ...\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>And now live code inspection should be working!</p>\n<p>The <em>@typescript-eslint</em> plugin has lots of TypeScript-only lint rules but also all basic eslint rules are usable in TypeScript projects. We should probably for now just use the recommended settings and see where it takes us and modify our rules as we go, if we find something we want to behave differently. On top of the regular recommended settings we should already try to get familiar with coding styles we are using this week and <em>set the semicolon at the end of each line of code to required</em>. So let's set the <em>.eslintrc</em> to include the following:</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"extends\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token string\">\"eslint:recommended\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"plugin:@typescript-eslint/recommended\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"plugin:@typescript-eslint/recommended-requiring-type-checking\"</span>\n  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"plugins\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"@typescript-eslint\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"env\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"browser\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"es6\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"rules\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"@typescript-eslint/semi\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"error\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"@typescript-eslint/no-explicit-any\"</span><span class=\"token operator\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"@typescript-eslint/explicit-function-return-type\"</span><span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"@typescript-eslint/no-unused-vars\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"error\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> <span class=\"token property\">\"argsIgnorePattern\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"^_\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"no-case-declarations\"</span><span class=\"token operator\">:</span> <span class=\"token number\">0</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"parser\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"@typescript-eslint/parser\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"parserOptions\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"project\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"./tsconfig.json\"</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>And now let's fix everything that needs to be fixed!</p>\n</div>\n<div class=\"tasks\">\n<h3>Exercises</h3>\n<h4>9.7</h4>\n<p>Add to your app an endpoint for the exercise calculator. It should be used by doing a HTTP POST request to endpoint <em>exercises</em> with the input in the request body</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">{</span>\n  daily_exercises<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2.5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> \n  target<span class=\"token punctuation\">:</span> <span class=\"token number\">2</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Response is a json of the following form</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">{</span>\n    <span class=\"token string\">\"periodLength\"</span><span class=\"token punctuation\">:</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"trainingDays\"</span><span class=\"token punctuation\">:</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"success\"</span><span class=\"token punctuation\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"rating\"</span><span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"ratingDescription\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"bad\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"target\"</span><span class=\"token punctuation\">:</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"average\"</span><span class=\"token punctuation\">:</span> <span class=\"token number\">1.2142857142857142</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>If the body of the request is not of the right form, response with proper statuscode and error message is given. The error message is either</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">{</span>\n  error<span class=\"token punctuation\">:</span> <span class=\"token string\">\"parameters missing\"</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>or</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">{</span>\n  error<span class=\"token punctuation\">:</span> <span class=\"token string\">\"malformatted parameters\"</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>depending on the error, the later happens if the input values does not have the right type (are not numbers or convertable to numbers).</p>\n</div>","frontmatter":{"mainImage":{"publicURL":"/static/part-9-f6057a11c6e419b877b946d5dd8329fd.svg"},"part":9,"letter":"b","lang":"en"}}},"pageContext":{"part":9,"letter":"b","lang":"en"}}